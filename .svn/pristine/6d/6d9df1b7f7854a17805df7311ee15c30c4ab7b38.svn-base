/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sogou.bizwork.task.api.task.to;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TaskTo implements org.apache.thrift.TBase<TaskTo, TaskTo._Fields>, java.io.Serializable, Cloneable, Comparable<TaskTo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskTo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CREATE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("createUser", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CHARGE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeUser", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField FOLLOW_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("followUsers", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TASK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ATTACHMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("attachment", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CHANGE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("changeTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskToStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskToTupleSchemeFactory());
  }

  public long id; // required
  public long createUser; // required
  public long chargeUser; // required
  public List<Long> followUsers; // required
  public String startTime; // required
  public String endTime; // required
  public String taskName; // required
  public String description; // required
  public String attachment; // required
  public byte status; // required
  public String createTime; // required
  public String changeTime; // required
  public List<com.sogou.bizwork.task.api.tag.to.TagTo> tags; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CREATE_USER((short)2, "createUser"),
    CHARGE_USER((short)3, "chargeUser"),
    FOLLOW_USERS((short)4, "followUsers"),
    START_TIME((short)5, "startTime"),
    END_TIME((short)6, "endTime"),
    TASK_NAME((short)7, "taskName"),
    DESCRIPTION((short)8, "description"),
    ATTACHMENT((short)9, "attachment"),
    STATUS((short)10, "status"),
    CREATE_TIME((short)11, "createTime"),
    CHANGE_TIME((short)12, "changeTime"),
    TAGS((short)13, "tags");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CREATE_USER
          return CREATE_USER;
        case 3: // CHARGE_USER
          return CHARGE_USER;
        case 4: // FOLLOW_USERS
          return FOLLOW_USERS;
        case 5: // START_TIME
          return START_TIME;
        case 6: // END_TIME
          return END_TIME;
        case 7: // TASK_NAME
          return TASK_NAME;
        case 8: // DESCRIPTION
          return DESCRIPTION;
        case 9: // ATTACHMENT
          return ATTACHMENT;
        case 10: // STATUS
          return STATUS;
        case 11: // CREATE_TIME
          return CREATE_TIME;
        case 12: // CHANGE_TIME
          return CHANGE_TIME;
        case 13: // TAGS
          return TAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CREATEUSER_ISSET_ID = 1;
  private static final int __CHARGEUSER_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_USER, new org.apache.thrift.meta_data.FieldMetaData("createUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHARGE_USER, new org.apache.thrift.meta_data.FieldMetaData("chargeUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FOLLOW_USERS, new org.apache.thrift.meta_data.FieldMetaData("followUsers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_NAME, new org.apache.thrift.meta_data.FieldMetaData("taskName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTACHMENT, new org.apache.thrift.meta_data.FieldMetaData("attachment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANGE_TIME, new org.apache.thrift.meta_data.FieldMetaData("changeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sogou.bizwork.task.api.tag.to.TagTo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskTo.class, metaDataMap);
  }

  public TaskTo() {
  }

  public TaskTo(
    long id,
    long createUser,
    long chargeUser,
    List<Long> followUsers,
    String startTime,
    String endTime,
    String taskName,
    String description,
    String attachment,
    byte status,
    String createTime,
    String changeTime,
    List<com.sogou.bizwork.task.api.tag.to.TagTo> tags)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.createUser = createUser;
    setCreateUserIsSet(true);
    this.chargeUser = chargeUser;
    setChargeUserIsSet(true);
    this.followUsers = followUsers;
    this.startTime = startTime;
    this.endTime = endTime;
    this.taskName = taskName;
    this.description = description;
    this.attachment = attachment;
    this.status = status;
    setStatusIsSet(true);
    this.createTime = createTime;
    this.changeTime = changeTime;
    this.tags = tags;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskTo(TaskTo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.createUser = other.createUser;
    this.chargeUser = other.chargeUser;
    if (other.isSetFollowUsers()) {
      List<Long> __this__followUsers = new ArrayList<Long>(other.followUsers);
      this.followUsers = __this__followUsers;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetTaskName()) {
      this.taskName = other.taskName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetAttachment()) {
      this.attachment = other.attachment;
    }
    this.status = other.status;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetChangeTime()) {
      this.changeTime = other.changeTime;
    }
    if (other.isSetTags()) {
      List<com.sogou.bizwork.task.api.tag.to.TagTo> __this__tags = new ArrayList<com.sogou.bizwork.task.api.tag.to.TagTo>(other.tags.size());
      for (com.sogou.bizwork.task.api.tag.to.TagTo other_element : other.tags) {
        __this__tags.add(new com.sogou.bizwork.task.api.tag.to.TagTo(other_element));
      }
      this.tags = __this__tags;
    }
  }

  public TaskTo deepCopy() {
    return new TaskTo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCreateUserIsSet(false);
    this.createUser = 0;
    setChargeUserIsSet(false);
    this.chargeUser = 0;
    this.followUsers = null;
    this.startTime = null;
    this.endTime = null;
    this.taskName = null;
    this.description = null;
    this.attachment = null;
    setStatusIsSet(false);
    this.status = 0;
    this.createTime = null;
    this.changeTime = null;
    this.tags = null;
  }

  public long getId() {
    return this.id;
  }

  public TaskTo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getCreateUser() {
    return this.createUser;
  }

  public TaskTo setCreateUser(long createUser) {
    this.createUser = createUser;
    setCreateUserIsSet(true);
    return this;
  }

  public void unsetCreateUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEUSER_ISSET_ID);
  }

  /** Returns true if field createUser is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateUser() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEUSER_ISSET_ID);
  }

  public void setCreateUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEUSER_ISSET_ID, value);
  }

  public long getChargeUser() {
    return this.chargeUser;
  }

  public TaskTo setChargeUser(long chargeUser) {
    this.chargeUser = chargeUser;
    setChargeUserIsSet(true);
    return this;
  }

  public void unsetChargeUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGEUSER_ISSET_ID);
  }

  /** Returns true if field chargeUser is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeUser() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGEUSER_ISSET_ID);
  }

  public void setChargeUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGEUSER_ISSET_ID, value);
  }

  public int getFollowUsersSize() {
    return (this.followUsers == null) ? 0 : this.followUsers.size();
  }

  public java.util.Iterator<Long> getFollowUsersIterator() {
    return (this.followUsers == null) ? null : this.followUsers.iterator();
  }

  public void addToFollowUsers(long elem) {
    if (this.followUsers == null) {
      this.followUsers = new ArrayList<Long>();
    }
    this.followUsers.add(elem);
  }

  public List<Long> getFollowUsers() {
    return this.followUsers;
  }

  public TaskTo setFollowUsers(List<Long> followUsers) {
    this.followUsers = followUsers;
    return this;
  }

  public void unsetFollowUsers() {
    this.followUsers = null;
  }

  /** Returns true if field followUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowUsers() {
    return this.followUsers != null;
  }

  public void setFollowUsersIsSet(boolean value) {
    if (!value) {
      this.followUsers = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public TaskTo setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public TaskTo setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public String getTaskName() {
    return this.taskName;
  }

  public TaskTo setTaskName(String taskName) {
    this.taskName = taskName;
    return this;
  }

  public void unsetTaskName() {
    this.taskName = null;
  }

  /** Returns true if field taskName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskName() {
    return this.taskName != null;
  }

  public void setTaskNameIsSet(boolean value) {
    if (!value) {
      this.taskName = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public TaskTo setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getAttachment() {
    return this.attachment;
  }

  public TaskTo setAttachment(String attachment) {
    this.attachment = attachment;
    return this;
  }

  public void unsetAttachment() {
    this.attachment = null;
  }

  /** Returns true if field attachment is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachment() {
    return this.attachment != null;
  }

  public void setAttachmentIsSet(boolean value) {
    if (!value) {
      this.attachment = null;
    }
  }

  public byte getStatus() {
    return this.status;
  }

  public TaskTo setStatus(byte status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public TaskTo setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getChangeTime() {
    return this.changeTime;
  }

  public TaskTo setChangeTime(String changeTime) {
    this.changeTime = changeTime;
    return this;
  }

  public void unsetChangeTime() {
    this.changeTime = null;
  }

  /** Returns true if field changeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetChangeTime() {
    return this.changeTime != null;
  }

  public void setChangeTimeIsSet(boolean value) {
    if (!value) {
      this.changeTime = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<com.sogou.bizwork.task.api.tag.to.TagTo> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(com.sogou.bizwork.task.api.tag.to.TagTo elem) {
    if (this.tags == null) {
      this.tags = new ArrayList<com.sogou.bizwork.task.api.tag.to.TagTo>();
    }
    this.tags.add(elem);
  }

  public List<com.sogou.bizwork.task.api.tag.to.TagTo> getTags() {
    return this.tags;
  }

  public TaskTo setTags(List<com.sogou.bizwork.task.api.tag.to.TagTo> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CREATE_USER:
      if (value == null) {
        unsetCreateUser();
      } else {
        setCreateUser((Long)value);
      }
      break;

    case CHARGE_USER:
      if (value == null) {
        unsetChargeUser();
      } else {
        setChargeUser((Long)value);
      }
      break;

    case FOLLOW_USERS:
      if (value == null) {
        unsetFollowUsers();
      } else {
        setFollowUsers((List<Long>)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case TASK_NAME:
      if (value == null) {
        unsetTaskName();
      } else {
        setTaskName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case ATTACHMENT:
      if (value == null) {
        unsetAttachment();
      } else {
        setAttachment((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Byte)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case CHANGE_TIME:
      if (value == null) {
        unsetChangeTime();
      } else {
        setChangeTime((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((List<com.sogou.bizwork.task.api.tag.to.TagTo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CREATE_USER:
      return Long.valueOf(getCreateUser());

    case CHARGE_USER:
      return Long.valueOf(getChargeUser());

    case FOLLOW_USERS:
      return getFollowUsers();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case TASK_NAME:
      return getTaskName();

    case DESCRIPTION:
      return getDescription();

    case ATTACHMENT:
      return getAttachment();

    case STATUS:
      return Byte.valueOf(getStatus());

    case CREATE_TIME:
      return getCreateTime();

    case CHANGE_TIME:
      return getChangeTime();

    case TAGS:
      return getTags();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CREATE_USER:
      return isSetCreateUser();
    case CHARGE_USER:
      return isSetChargeUser();
    case FOLLOW_USERS:
      return isSetFollowUsers();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case TASK_NAME:
      return isSetTaskName();
    case DESCRIPTION:
      return isSetDescription();
    case ATTACHMENT:
      return isSetAttachment();
    case STATUS:
      return isSetStatus();
    case CREATE_TIME:
      return isSetCreateTime();
    case CHANGE_TIME:
      return isSetChangeTime();
    case TAGS:
      return isSetTags();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskTo)
      return this.equals((TaskTo)that);
    return false;
  }

  public boolean equals(TaskTo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_createUser = true;
    boolean that_present_createUser = true;
    if (this_present_createUser || that_present_createUser) {
      if (!(this_present_createUser && that_present_createUser))
        return false;
      if (this.createUser != that.createUser)
        return false;
    }

    boolean this_present_chargeUser = true;
    boolean that_present_chargeUser = true;
    if (this_present_chargeUser || that_present_chargeUser) {
      if (!(this_present_chargeUser && that_present_chargeUser))
        return false;
      if (this.chargeUser != that.chargeUser)
        return false;
    }

    boolean this_present_followUsers = true && this.isSetFollowUsers();
    boolean that_present_followUsers = true && that.isSetFollowUsers();
    if (this_present_followUsers || that_present_followUsers) {
      if (!(this_present_followUsers && that_present_followUsers))
        return false;
      if (!this.followUsers.equals(that.followUsers))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_taskName = true && this.isSetTaskName();
    boolean that_present_taskName = true && that.isSetTaskName();
    if (this_present_taskName || that_present_taskName) {
      if (!(this_present_taskName && that_present_taskName))
        return false;
      if (!this.taskName.equals(that.taskName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_attachment = true && this.isSetAttachment();
    boolean that_present_attachment = true && that.isSetAttachment();
    if (this_present_attachment || that_present_attachment) {
      if (!(this_present_attachment && that_present_attachment))
        return false;
      if (!this.attachment.equals(that.attachment))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_changeTime = true && this.isSetChangeTime();
    boolean that_present_changeTime = true && that.isSetChangeTime();
    if (this_present_changeTime || that_present_changeTime) {
      if (!(this_present_changeTime && that_present_changeTime))
        return false;
      if (!this.changeTime.equals(that.changeTime))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TaskTo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateUser()).compareTo(other.isSetCreateUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createUser, other.createUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeUser()).compareTo(other.isSetChargeUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeUser, other.chargeUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowUsers()).compareTo(other.isSetFollowUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followUsers, other.followUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskName()).compareTo(other.isSetTaskName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskName, other.taskName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttachment()).compareTo(other.isSetAttachment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachment, other.attachment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChangeTime()).compareTo(other.isSetChangeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changeTime, other.changeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskTo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createUser:");
    sb.append(this.createUser);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeUser:");
    sb.append(this.chargeUser);
    first = false;
    if (!first) sb.append(", ");
    sb.append("followUsers:");
    if (this.followUsers == null) {
      sb.append("null");
    } else {
      sb.append(this.followUsers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskName:");
    if (this.taskName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attachment:");
    if (this.attachment == null) {
      sb.append("null");
    } else {
      sb.append(this.attachment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("changeTime:");
    if (this.changeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.changeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskToStandardSchemeFactory implements SchemeFactory {
    public TaskToStandardScheme getScheme() {
      return new TaskToStandardScheme();
    }
  }

  private static class TaskToStandardScheme extends StandardScheme<TaskTo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskTo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createUser = iprot.readI64();
              struct.setCreateUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHARGE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chargeUser = iprot.readI64();
              struct.setChargeUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FOLLOW_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.followUsers = new ArrayList<Long>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  long _elem2;
                  _elem2 = iprot.readI64();
                  struct.followUsers.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setFollowUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TASK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskName = iprot.readString();
              struct.setTaskNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ATTACHMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attachment = iprot.readString();
              struct.setAttachmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.status = iprot.readByte();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CHANGE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.changeTime = iprot.readString();
              struct.setChangeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.tags = new ArrayList<com.sogou.bizwork.task.api.tag.to.TagTo>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  com.sogou.bizwork.task.api.tag.to.TagTo _elem5;
                  _elem5 = new com.sogou.bizwork.task.api.tag.to.TagTo();
                  _elem5.read(iprot);
                  struct.tags.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskTo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_USER_FIELD_DESC);
      oprot.writeI64(struct.createUser);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARGE_USER_FIELD_DESC);
      oprot.writeI64(struct.chargeUser);
      oprot.writeFieldEnd();
      if (struct.followUsers != null) {
        oprot.writeFieldBegin(FOLLOW_USERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.followUsers.size()));
          for (long _iter6 : struct.followUsers)
          {
            oprot.writeI64(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.taskName != null) {
        oprot.writeFieldBegin(TASK_NAME_FIELD_DESC);
        oprot.writeString(struct.taskName);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.attachment != null) {
        oprot.writeFieldBegin(ATTACHMENT_FIELD_DESC);
        oprot.writeString(struct.attachment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeByte(struct.status);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.changeTime != null) {
        oprot.writeFieldBegin(CHANGE_TIME_FIELD_DESC);
        oprot.writeString(struct.changeTime);
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tags.size()));
          for (com.sogou.bizwork.task.api.tag.to.TagTo _iter7 : struct.tags)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskToTupleSchemeFactory implements SchemeFactory {
    public TaskToTupleScheme getScheme() {
      return new TaskToTupleScheme();
    }
  }

  private static class TaskToTupleScheme extends TupleScheme<TaskTo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskTo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCreateUser()) {
        optionals.set(1);
      }
      if (struct.isSetChargeUser()) {
        optionals.set(2);
      }
      if (struct.isSetFollowUsers()) {
        optionals.set(3);
      }
      if (struct.isSetStartTime()) {
        optionals.set(4);
      }
      if (struct.isSetEndTime()) {
        optionals.set(5);
      }
      if (struct.isSetTaskName()) {
        optionals.set(6);
      }
      if (struct.isSetDescription()) {
        optionals.set(7);
      }
      if (struct.isSetAttachment()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(10);
      }
      if (struct.isSetChangeTime()) {
        optionals.set(11);
      }
      if (struct.isSetTags()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCreateUser()) {
        oprot.writeI64(struct.createUser);
      }
      if (struct.isSetChargeUser()) {
        oprot.writeI64(struct.chargeUser);
      }
      if (struct.isSetFollowUsers()) {
        {
          oprot.writeI32(struct.followUsers.size());
          for (long _iter8 : struct.followUsers)
          {
            oprot.writeI64(_iter8);
          }
        }
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetTaskName()) {
        oprot.writeString(struct.taskName);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetAttachment()) {
        oprot.writeString(struct.attachment);
      }
      if (struct.isSetStatus()) {
        oprot.writeByte(struct.status);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetChangeTime()) {
        oprot.writeString(struct.changeTime);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (com.sogou.bizwork.task.api.tag.to.TagTo _iter9 : struct.tags)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskTo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.createUser = iprot.readI64();
        struct.setCreateUserIsSet(true);
      }
      if (incoming.get(2)) {
        struct.chargeUser = iprot.readI64();
        struct.setChargeUserIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.followUsers = new ArrayList<Long>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            long _elem12;
            _elem12 = iprot.readI64();
            struct.followUsers.add(_elem12);
          }
        }
        struct.setFollowUsersIsSet(true);
      }
      if (incoming.get(4)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.taskName = iprot.readString();
        struct.setTaskNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.attachment = iprot.readString();
        struct.setAttachmentIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readByte();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.changeTime = iprot.readString();
        struct.setChangeTimeIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tags = new ArrayList<com.sogou.bizwork.task.api.tag.to.TagTo>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            com.sogou.bizwork.task.api.tag.to.TagTo _elem15;
            _elem15 = new com.sogou.bizwork.task.api.tag.to.TagTo();
            _elem15.read(iprot);
            struct.tags.add(_elem15);
          }
        }
        struct.setTagsIsSet(true);
      }
    }
  }

}

