/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sogou.bizwork.task.api.common.to;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PaginationTo implements org.apache.thrift.TBase<PaginationTo, PaginationTo._Fields>, java.io.Serializable, Cloneable, Comparable<PaginationTo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PaginationTo");

  private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("pageIndex", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("pageStart", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("orderFieldStr", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORDER_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("orderDirection", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PaginationToStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PaginationToTupleSchemeFactory());
  }

  public int pageIndex; // required
  public int pageSize; // required
  public int pageStart; // required
  public String orderFieldStr; // optional
  /**
   * 
   * @see OrderType
   */
  public OrderType orderDirection; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE_INDEX((short)1, "pageIndex"),
    PAGE_SIZE((short)2, "pageSize"),
    PAGE_START((short)3, "pageStart"),
    ORDER_FIELD_STR((short)4, "orderFieldStr"),
    /**
     * 
     * @see OrderType
     */
    ORDER_DIRECTION((short)5, "orderDirection");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE_INDEX
          return PAGE_INDEX;
        case 2: // PAGE_SIZE
          return PAGE_SIZE;
        case 3: // PAGE_START
          return PAGE_START;
        case 4: // ORDER_FIELD_STR
          return ORDER_FIELD_STR;
        case 5: // ORDER_DIRECTION
          return ORDER_DIRECTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGEINDEX_ISSET_ID = 0;
  private static final int __PAGESIZE_ISSET_ID = 1;
  private static final int __PAGESTART_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ORDER_FIELD_STR,_Fields.ORDER_DIRECTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("pageIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_START, new org.apache.thrift.meta_data.FieldMetaData("pageStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_FIELD_STR, new org.apache.thrift.meta_data.FieldMetaData("orderFieldStr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("orderDirection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OrderType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PaginationTo.class, metaDataMap);
  }

  public PaginationTo() {
  }

  public PaginationTo(
    int pageIndex,
    int pageSize,
    int pageStart)
  {
    this();
    this.pageIndex = pageIndex;
    setPageIndexIsSet(true);
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.pageStart = pageStart;
    setPageStartIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaginationTo(PaginationTo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pageIndex = other.pageIndex;
    this.pageSize = other.pageSize;
    this.pageStart = other.pageStart;
    if (other.isSetOrderFieldStr()) {
      this.orderFieldStr = other.orderFieldStr;
    }
    if (other.isSetOrderDirection()) {
      this.orderDirection = other.orderDirection;
    }
  }

  public PaginationTo deepCopy() {
    return new PaginationTo(this);
  }

  @Override
  public void clear() {
    setPageIndexIsSet(false);
    this.pageIndex = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    setPageStartIsSet(false);
    this.pageStart = 0;
    this.orderFieldStr = null;
    this.orderDirection = null;
  }

  public int getPageIndex() {
    return this.pageIndex;
  }

  public PaginationTo setPageIndex(int pageIndex) {
    this.pageIndex = pageIndex;
    setPageIndexIsSet(true);
    return this;
  }

  public void unsetPageIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
  }

  /** Returns true if field pageIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetPageIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
  }

  public void setPageIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEINDEX_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public PaginationTo setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getPageStart() {
    return this.pageStart;
  }

  public PaginationTo setPageStart(int pageStart) {
    this.pageStart = pageStart;
    setPageStartIsSet(true);
    return this;
  }

  public void unsetPageStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESTART_ISSET_ID);
  }

  /** Returns true if field pageStart is set (has been assigned a value) and false otherwise */
  public boolean isSetPageStart() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESTART_ISSET_ID);
  }

  public void setPageStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESTART_ISSET_ID, value);
  }

  public String getOrderFieldStr() {
    return this.orderFieldStr;
  }

  public PaginationTo setOrderFieldStr(String orderFieldStr) {
    this.orderFieldStr = orderFieldStr;
    return this;
  }

  public void unsetOrderFieldStr() {
    this.orderFieldStr = null;
  }

  /** Returns true if field orderFieldStr is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderFieldStr() {
    return this.orderFieldStr != null;
  }

  public void setOrderFieldStrIsSet(boolean value) {
    if (!value) {
      this.orderFieldStr = null;
    }
  }

  /**
   * 
   * @see OrderType
   */
  public OrderType getOrderDirection() {
    return this.orderDirection;
  }

  /**
   * 
   * @see OrderType
   */
  public PaginationTo setOrderDirection(OrderType orderDirection) {
    this.orderDirection = orderDirection;
    return this;
  }

  public void unsetOrderDirection() {
    this.orderDirection = null;
  }

  /** Returns true if field orderDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderDirection() {
    return this.orderDirection != null;
  }

  public void setOrderDirectionIsSet(boolean value) {
    if (!value) {
      this.orderDirection = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE_INDEX:
      if (value == null) {
        unsetPageIndex();
      } else {
        setPageIndex((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case PAGE_START:
      if (value == null) {
        unsetPageStart();
      } else {
        setPageStart((Integer)value);
      }
      break;

    case ORDER_FIELD_STR:
      if (value == null) {
        unsetOrderFieldStr();
      } else {
        setOrderFieldStr((String)value);
      }
      break;

    case ORDER_DIRECTION:
      if (value == null) {
        unsetOrderDirection();
      } else {
        setOrderDirection((OrderType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE_INDEX:
      return Integer.valueOf(getPageIndex());

    case PAGE_SIZE:
      return Integer.valueOf(getPageSize());

    case PAGE_START:
      return Integer.valueOf(getPageStart());

    case ORDER_FIELD_STR:
      return getOrderFieldStr();

    case ORDER_DIRECTION:
      return getOrderDirection();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE_INDEX:
      return isSetPageIndex();
    case PAGE_SIZE:
      return isSetPageSize();
    case PAGE_START:
      return isSetPageStart();
    case ORDER_FIELD_STR:
      return isSetOrderFieldStr();
    case ORDER_DIRECTION:
      return isSetOrderDirection();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PaginationTo)
      return this.equals((PaginationTo)that);
    return false;
  }

  public boolean equals(PaginationTo that) {
    if (that == null)
      return false;

    boolean this_present_pageIndex = true;
    boolean that_present_pageIndex = true;
    if (this_present_pageIndex || that_present_pageIndex) {
      if (!(this_present_pageIndex && that_present_pageIndex))
        return false;
      if (this.pageIndex != that.pageIndex)
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_pageStart = true;
    boolean that_present_pageStart = true;
    if (this_present_pageStart || that_present_pageStart) {
      if (!(this_present_pageStart && that_present_pageStart))
        return false;
      if (this.pageStart != that.pageStart)
        return false;
    }

    boolean this_present_orderFieldStr = true && this.isSetOrderFieldStr();
    boolean that_present_orderFieldStr = true && that.isSetOrderFieldStr();
    if (this_present_orderFieldStr || that_present_orderFieldStr) {
      if (!(this_present_orderFieldStr && that_present_orderFieldStr))
        return false;
      if (!this.orderFieldStr.equals(that.orderFieldStr))
        return false;
    }

    boolean this_present_orderDirection = true && this.isSetOrderDirection();
    boolean that_present_orderDirection = true && that.isSetOrderDirection();
    if (this_present_orderDirection || that_present_orderDirection) {
      if (!(this_present_orderDirection && that_present_orderDirection))
        return false;
      if (!this.orderDirection.equals(that.orderDirection))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PaginationTo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPageIndex()).compareTo(other.isSetPageIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageIndex, other.pageIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageStart()).compareTo(other.isSetPageStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageStart, other.pageStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderFieldStr()).compareTo(other.isSetOrderFieldStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderFieldStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderFieldStr, other.orderFieldStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderDirection()).compareTo(other.isSetOrderDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderDirection, other.orderDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PaginationTo(");
    boolean first = true;

    sb.append("pageIndex:");
    sb.append(this.pageIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageStart:");
    sb.append(this.pageStart);
    first = false;
    if (isSetOrderFieldStr()) {
      if (!first) sb.append(", ");
      sb.append("orderFieldStr:");
      if (this.orderFieldStr == null) {
        sb.append("null");
      } else {
        sb.append(this.orderFieldStr);
      }
      first = false;
    }
    if (isSetOrderDirection()) {
      if (!first) sb.append(", ");
      sb.append("orderDirection:");
      if (this.orderDirection == null) {
        sb.append("null");
      } else {
        sb.append(this.orderDirection);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PaginationToStandardSchemeFactory implements SchemeFactory {
    public PaginationToStandardScheme getScheme() {
      return new PaginationToStandardScheme();
    }
  }

  private static class PaginationToStandardScheme extends StandardScheme<PaginationTo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PaginationTo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageIndex = iprot.readI32();
              struct.setPageIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageStart = iprot.readI32();
              struct.setPageStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_FIELD_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderFieldStr = iprot.readString();
              struct.setOrderFieldStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDER_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderDirection = OrderType.findByValue(iprot.readI32());
              struct.setOrderDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PaginationTo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
      oprot.writeI32(struct.pageIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_START_FIELD_DESC);
      oprot.writeI32(struct.pageStart);
      oprot.writeFieldEnd();
      if (struct.orderFieldStr != null) {
        if (struct.isSetOrderFieldStr()) {
          oprot.writeFieldBegin(ORDER_FIELD_STR_FIELD_DESC);
          oprot.writeString(struct.orderFieldStr);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderDirection != null) {
        if (struct.isSetOrderDirection()) {
          oprot.writeFieldBegin(ORDER_DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.orderDirection.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PaginationToTupleSchemeFactory implements SchemeFactory {
    public PaginationToTupleScheme getScheme() {
      return new PaginationToTupleScheme();
    }
  }

  private static class PaginationToTupleScheme extends TupleScheme<PaginationTo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PaginationTo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPageIndex()) {
        optionals.set(0);
      }
      if (struct.isSetPageSize()) {
        optionals.set(1);
      }
      if (struct.isSetPageStart()) {
        optionals.set(2);
      }
      if (struct.isSetOrderFieldStr()) {
        optionals.set(3);
      }
      if (struct.isSetOrderDirection()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPageIndex()) {
        oprot.writeI32(struct.pageIndex);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetPageStart()) {
        oprot.writeI32(struct.pageStart);
      }
      if (struct.isSetOrderFieldStr()) {
        oprot.writeString(struct.orderFieldStr);
      }
      if (struct.isSetOrderDirection()) {
        oprot.writeI32(struct.orderDirection.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PaginationTo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.pageIndex = iprot.readI32();
        struct.setPageIndexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pageStart = iprot.readI32();
        struct.setPageStartIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderFieldStr = iprot.readString();
        struct.setOrderFieldStrIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orderDirection = OrderType.findByValue(iprot.readI32());
        struct.setOrderDirectionIsSet(true);
      }
    }
  }

}

