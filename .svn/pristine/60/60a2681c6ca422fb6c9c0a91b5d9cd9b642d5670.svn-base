/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sogou.bizwork.task.api.taskfollow.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TaskFollowTService {

  public interface Iface {

    public com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult updateNewTaskFollowsByTaskId(List<Long> newTaskFollows, long taskId) throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void updateNewTaskFollowsByTaskId(List<Long> newTaskFollows, long taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult updateNewTaskFollowsByTaskId(List<Long> newTaskFollows, long taskId) throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException
    {
      send_updateNewTaskFollowsByTaskId(newTaskFollows, taskId);
      return recv_updateNewTaskFollowsByTaskId();
    }

    public void send_updateNewTaskFollowsByTaskId(List<Long> newTaskFollows, long taskId) throws org.apache.thrift.TException
    {
      updateNewTaskFollowsByTaskId_args args = new updateNewTaskFollowsByTaskId_args();
      args.setNewTaskFollows(newTaskFollows);
      args.setTaskId(taskId);
      sendBase("updateNewTaskFollowsByTaskId", args);
    }

    public com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult recv_updateNewTaskFollowsByTaskId() throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException
    {
      updateNewTaskFollowsByTaskId_result result = new updateNewTaskFollowsByTaskId_result();
      receiveBase(result, "updateNewTaskFollowsByTaskId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateNewTaskFollowsByTaskId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void updateNewTaskFollowsByTaskId(List<Long> newTaskFollows, long taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateNewTaskFollowsByTaskId_call method_call = new updateNewTaskFollowsByTaskId_call(newTaskFollows, taskId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateNewTaskFollowsByTaskId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> newTaskFollows;
      private long taskId;
      public updateNewTaskFollowsByTaskId_call(List<Long> newTaskFollows, long taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newTaskFollows = newTaskFollows;
        this.taskId = taskId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateNewTaskFollowsByTaskId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateNewTaskFollowsByTaskId_args args = new updateNewTaskFollowsByTaskId_args();
        args.setNewTaskFollows(newTaskFollows);
        args.setTaskId(taskId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult getResult() throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateNewTaskFollowsByTaskId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("updateNewTaskFollowsByTaskId", new updateNewTaskFollowsByTaskId());
      return processMap;
    }

    public static class updateNewTaskFollowsByTaskId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateNewTaskFollowsByTaskId_args> {
      public updateNewTaskFollowsByTaskId() {
        super("updateNewTaskFollowsByTaskId");
      }

      public updateNewTaskFollowsByTaskId_args getEmptyArgsInstance() {
        return new updateNewTaskFollowsByTaskId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateNewTaskFollowsByTaskId_result getResult(I iface, updateNewTaskFollowsByTaskId_args args) throws org.apache.thrift.TException {
        updateNewTaskFollowsByTaskId_result result = new updateNewTaskFollowsByTaskId_result();
        try {
          result.success = iface.updateNewTaskFollowsByTaskId(args.newTaskFollows, args.taskId);
        } catch (com.sogou.bizwork.task.api.common.exception.ApiTException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("updateNewTaskFollowsByTaskId", new updateNewTaskFollowsByTaskId());
      return processMap;
    }

    public static class updateNewTaskFollowsByTaskId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateNewTaskFollowsByTaskId_args, com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult> {
      public updateNewTaskFollowsByTaskId() {
        super("updateNewTaskFollowsByTaskId");
      }

      public updateNewTaskFollowsByTaskId_args getEmptyArgsInstance() {
        return new updateNewTaskFollowsByTaskId_args();
      }

      public AsyncMethodCallback<com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult>() { 
          public void onComplete(com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult o) {
            updateNewTaskFollowsByTaskId_result result = new updateNewTaskFollowsByTaskId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateNewTaskFollowsByTaskId_result result = new updateNewTaskFollowsByTaskId_result();
            if (e instanceof com.sogou.bizwork.task.api.common.exception.ApiTException) {
                        result.ex = (com.sogou.bizwork.task.api.common.exception.ApiTException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateNewTaskFollowsByTaskId_args args, org.apache.thrift.async.AsyncMethodCallback<com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult> resultHandler) throws TException {
        iface.updateNewTaskFollowsByTaskId(args.newTaskFollows, args.taskId,resultHandler);
      }
    }

  }

  public static class updateNewTaskFollowsByTaskId_args implements org.apache.thrift.TBase<updateNewTaskFollowsByTaskId_args, updateNewTaskFollowsByTaskId_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateNewTaskFollowsByTaskId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNewTaskFollowsByTaskId_args");

    private static final org.apache.thrift.protocol.TField NEW_TASK_FOLLOWS_FIELD_DESC = new org.apache.thrift.protocol.TField("newTaskFollows", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateNewTaskFollowsByTaskId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateNewTaskFollowsByTaskId_argsTupleSchemeFactory());
    }

    public List<Long> newTaskFollows; // required
    public long taskId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_TASK_FOLLOWS((short)1, "newTaskFollows"),
      TASK_ID((short)2, "taskId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_TASK_FOLLOWS
            return NEW_TASK_FOLLOWS;
          case 2: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_TASK_FOLLOWS, new org.apache.thrift.meta_data.FieldMetaData("newTaskFollows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNewTaskFollowsByTaskId_args.class, metaDataMap);
    }

    public updateNewTaskFollowsByTaskId_args() {
    }

    public updateNewTaskFollowsByTaskId_args(
      List<Long> newTaskFollows,
      long taskId)
    {
      this();
      this.newTaskFollows = newTaskFollows;
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNewTaskFollowsByTaskId_args(updateNewTaskFollowsByTaskId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNewTaskFollows()) {
        List<Long> __this__newTaskFollows = new ArrayList<Long>(other.newTaskFollows);
        this.newTaskFollows = __this__newTaskFollows;
      }
      this.taskId = other.taskId;
    }

    public updateNewTaskFollowsByTaskId_args deepCopy() {
      return new updateNewTaskFollowsByTaskId_args(this);
    }

    @Override
    public void clear() {
      this.newTaskFollows = null;
      setTaskIdIsSet(false);
      this.taskId = 0;
    }

    public int getNewTaskFollowsSize() {
      return (this.newTaskFollows == null) ? 0 : this.newTaskFollows.size();
    }

    public java.util.Iterator<Long> getNewTaskFollowsIterator() {
      return (this.newTaskFollows == null) ? null : this.newTaskFollows.iterator();
    }

    public void addToNewTaskFollows(long elem) {
      if (this.newTaskFollows == null) {
        this.newTaskFollows = new ArrayList<Long>();
      }
      this.newTaskFollows.add(elem);
    }

    public List<Long> getNewTaskFollows() {
      return this.newTaskFollows;
    }

    public updateNewTaskFollowsByTaskId_args setNewTaskFollows(List<Long> newTaskFollows) {
      this.newTaskFollows = newTaskFollows;
      return this;
    }

    public void unsetNewTaskFollows() {
      this.newTaskFollows = null;
    }

    /** Returns true if field newTaskFollows is set (has been assigned a value) and false otherwise */
    public boolean isSetNewTaskFollows() {
      return this.newTaskFollows != null;
    }

    public void setNewTaskFollowsIsSet(boolean value) {
      if (!value) {
        this.newTaskFollows = null;
      }
    }

    public long getTaskId() {
      return this.taskId;
    }

    public updateNewTaskFollowsByTaskId_args setTaskId(long taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
      return this;
    }

    public void unsetTaskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEW_TASK_FOLLOWS:
        if (value == null) {
          unsetNewTaskFollows();
        } else {
          setNewTaskFollows((List<Long>)value);
        }
        break;

      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_TASK_FOLLOWS:
        return getNewTaskFollows();

      case TASK_ID:
        return Long.valueOf(getTaskId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEW_TASK_FOLLOWS:
        return isSetNewTaskFollows();
      case TASK_ID:
        return isSetTaskId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNewTaskFollowsByTaskId_args)
        return this.equals((updateNewTaskFollowsByTaskId_args)that);
      return false;
    }

    public boolean equals(updateNewTaskFollowsByTaskId_args that) {
      if (that == null)
        return false;

      boolean this_present_newTaskFollows = true && this.isSetNewTaskFollows();
      boolean that_present_newTaskFollows = true && that.isSetNewTaskFollows();
      if (this_present_newTaskFollows || that_present_newTaskFollows) {
        if (!(this_present_newTaskFollows && that_present_newTaskFollows))
          return false;
        if (!this.newTaskFollows.equals(that.newTaskFollows))
          return false;
      }

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateNewTaskFollowsByTaskId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNewTaskFollows()).compareTo(other.isSetNewTaskFollows());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewTaskFollows()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newTaskFollows, other.newTaskFollows);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateNewTaskFollowsByTaskId_args(");
      boolean first = true;

      sb.append("newTaskFollows:");
      if (this.newTaskFollows == null) {
        sb.append("null");
      } else {
        sb.append(this.newTaskFollows);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNewTaskFollowsByTaskId_argsStandardSchemeFactory implements SchemeFactory {
      public updateNewTaskFollowsByTaskId_argsStandardScheme getScheme() {
        return new updateNewTaskFollowsByTaskId_argsStandardScheme();
      }
    }

    private static class updateNewTaskFollowsByTaskId_argsStandardScheme extends StandardScheme<updateNewTaskFollowsByTaskId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNewTaskFollowsByTaskId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_TASK_FOLLOWS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.newTaskFollows = new ArrayList<Long>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    long _elem2;
                    _elem2 = iprot.readI64();
                    struct.newTaskFollows.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setNewTaskFollowsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskId = iprot.readI64();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNewTaskFollowsByTaskId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newTaskFollows != null) {
          oprot.writeFieldBegin(NEW_TASK_FOLLOWS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.newTaskFollows.size()));
            for (long _iter3 : struct.newTaskFollows)
            {
              oprot.writeI64(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNewTaskFollowsByTaskId_argsTupleSchemeFactory implements SchemeFactory {
      public updateNewTaskFollowsByTaskId_argsTupleScheme getScheme() {
        return new updateNewTaskFollowsByTaskId_argsTupleScheme();
      }
    }

    private static class updateNewTaskFollowsByTaskId_argsTupleScheme extends TupleScheme<updateNewTaskFollowsByTaskId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNewTaskFollowsByTaskId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNewTaskFollows()) {
          optionals.set(0);
        }
        if (struct.isSetTaskId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNewTaskFollows()) {
          {
            oprot.writeI32(struct.newTaskFollows.size());
            for (long _iter4 : struct.newTaskFollows)
            {
              oprot.writeI64(_iter4);
            }
          }
        }
        if (struct.isSetTaskId()) {
          oprot.writeI64(struct.taskId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNewTaskFollowsByTaskId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.newTaskFollows = new ArrayList<Long>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              long _elem7;
              _elem7 = iprot.readI64();
              struct.newTaskFollows.add(_elem7);
            }
          }
          struct.setNewTaskFollowsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.taskId = iprot.readI64();
          struct.setTaskIdIsSet(true);
        }
      }
    }

  }

  public static class updateNewTaskFollowsByTaskId_result implements org.apache.thrift.TBase<updateNewTaskFollowsByTaskId_result, updateNewTaskFollowsByTaskId_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateNewTaskFollowsByTaskId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNewTaskFollowsByTaskId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateNewTaskFollowsByTaskId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateNewTaskFollowsByTaskId_resultTupleSchemeFactory());
    }

    public com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult success; // required
    public com.sogou.bizwork.task.api.common.exception.ApiTException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNewTaskFollowsByTaskId_result.class, metaDataMap);
    }

    public updateNewTaskFollowsByTaskId_result() {
    }

    public updateNewTaskFollowsByTaskId_result(
      com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult success,
      com.sogou.bizwork.task.api.common.exception.ApiTException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNewTaskFollowsByTaskId_result(updateNewTaskFollowsByTaskId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException(other.ex);
      }
    }

    public updateNewTaskFollowsByTaskId_result deepCopy() {
      return new updateNewTaskFollowsByTaskId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult getSuccess() {
      return this.success;
    }

    public updateNewTaskFollowsByTaskId_result setSuccess(com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.sogou.bizwork.task.api.common.exception.ApiTException getEx() {
      return this.ex;
    }

    public updateNewTaskFollowsByTaskId_result setEx(com.sogou.bizwork.task.api.common.exception.ApiTException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.sogou.bizwork.task.api.common.exception.ApiTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNewTaskFollowsByTaskId_result)
        return this.equals((updateNewTaskFollowsByTaskId_result)that);
      return false;
    }

    public boolean equals(updateNewTaskFollowsByTaskId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateNewTaskFollowsByTaskId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateNewTaskFollowsByTaskId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNewTaskFollowsByTaskId_resultStandardSchemeFactory implements SchemeFactory {
      public updateNewTaskFollowsByTaskId_resultStandardScheme getScheme() {
        return new updateNewTaskFollowsByTaskId_resultStandardScheme();
      }
    }

    private static class updateNewTaskFollowsByTaskId_resultStandardScheme extends StandardScheme<updateNewTaskFollowsByTaskId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNewTaskFollowsByTaskId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNewTaskFollowsByTaskId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNewTaskFollowsByTaskId_resultTupleSchemeFactory implements SchemeFactory {
      public updateNewTaskFollowsByTaskId_resultTupleScheme getScheme() {
        return new updateNewTaskFollowsByTaskId_resultTupleScheme();
      }
    }

    private static class updateNewTaskFollowsByTaskId_resultTupleScheme extends TupleScheme<updateNewTaskFollowsByTaskId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNewTaskFollowsByTaskId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNewTaskFollowsByTaskId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.sogou.bizwork.task.api.taskfollow.result.TaskFollowResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
