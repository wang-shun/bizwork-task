/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sogou.bizwork.task.api.medal.bo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MedalInfo implements org.apache.thrift.TBase<MedalInfo, MedalInfo._Fields>, java.io.Serializable, Cloneable, Comparable<MedalInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MedalInfo");

  private static final org.apache.thrift.protocol.TField MEDAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("medalType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEDAL_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("medalDescription", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MEDAL_IMG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("medalImgUrl", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MedalInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MedalInfoTupleSchemeFactory());
  }

  public String medalType; // required
  public String medalDescription; // required
  public String medalImgUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEDAL_TYPE((short)1, "medalType"),
    MEDAL_DESCRIPTION((short)2, "medalDescription"),
    MEDAL_IMG_URL((short)3, "medalImgUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEDAL_TYPE
          return MEDAL_TYPE;
        case 2: // MEDAL_DESCRIPTION
          return MEDAL_DESCRIPTION;
        case 3: // MEDAL_IMG_URL
          return MEDAL_IMG_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEDAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("medalType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDAL_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("medalDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDAL_IMG_URL, new org.apache.thrift.meta_data.FieldMetaData("medalImgUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MedalInfo.class, metaDataMap);
  }

  public MedalInfo() {
  }

  public MedalInfo(
    String medalType,
    String medalDescription,
    String medalImgUrl)
  {
    this();
    this.medalType = medalType;
    this.medalDescription = medalDescription;
    this.medalImgUrl = medalImgUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MedalInfo(MedalInfo other) {
    if (other.isSetMedalType()) {
      this.medalType = other.medalType;
    }
    if (other.isSetMedalDescription()) {
      this.medalDescription = other.medalDescription;
    }
    if (other.isSetMedalImgUrl()) {
      this.medalImgUrl = other.medalImgUrl;
    }
  }

  public MedalInfo deepCopy() {
    return new MedalInfo(this);
  }

  @Override
  public void clear() {
    this.medalType = null;
    this.medalDescription = null;
    this.medalImgUrl = null;
  }

  public String getMedalType() {
    return this.medalType;
  }

  public MedalInfo setMedalType(String medalType) {
    this.medalType = medalType;
    return this;
  }

  public void unsetMedalType() {
    this.medalType = null;
  }

  /** Returns true if field medalType is set (has been assigned a value) and false otherwise */
  public boolean isSetMedalType() {
    return this.medalType != null;
  }

  public void setMedalTypeIsSet(boolean value) {
    if (!value) {
      this.medalType = null;
    }
  }

  public String getMedalDescription() {
    return this.medalDescription;
  }

  public MedalInfo setMedalDescription(String medalDescription) {
    this.medalDescription = medalDescription;
    return this;
  }

  public void unsetMedalDescription() {
    this.medalDescription = null;
  }

  /** Returns true if field medalDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetMedalDescription() {
    return this.medalDescription != null;
  }

  public void setMedalDescriptionIsSet(boolean value) {
    if (!value) {
      this.medalDescription = null;
    }
  }

  public String getMedalImgUrl() {
    return this.medalImgUrl;
  }

  public MedalInfo setMedalImgUrl(String medalImgUrl) {
    this.medalImgUrl = medalImgUrl;
    return this;
  }

  public void unsetMedalImgUrl() {
    this.medalImgUrl = null;
  }

  /** Returns true if field medalImgUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetMedalImgUrl() {
    return this.medalImgUrl != null;
  }

  public void setMedalImgUrlIsSet(boolean value) {
    if (!value) {
      this.medalImgUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEDAL_TYPE:
      if (value == null) {
        unsetMedalType();
      } else {
        setMedalType((String)value);
      }
      break;

    case MEDAL_DESCRIPTION:
      if (value == null) {
        unsetMedalDescription();
      } else {
        setMedalDescription((String)value);
      }
      break;

    case MEDAL_IMG_URL:
      if (value == null) {
        unsetMedalImgUrl();
      } else {
        setMedalImgUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEDAL_TYPE:
      return getMedalType();

    case MEDAL_DESCRIPTION:
      return getMedalDescription();

    case MEDAL_IMG_URL:
      return getMedalImgUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEDAL_TYPE:
      return isSetMedalType();
    case MEDAL_DESCRIPTION:
      return isSetMedalDescription();
    case MEDAL_IMG_URL:
      return isSetMedalImgUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MedalInfo)
      return this.equals((MedalInfo)that);
    return false;
  }

  public boolean equals(MedalInfo that) {
    if (that == null)
      return false;

    boolean this_present_medalType = true && this.isSetMedalType();
    boolean that_present_medalType = true && that.isSetMedalType();
    if (this_present_medalType || that_present_medalType) {
      if (!(this_present_medalType && that_present_medalType))
        return false;
      if (!this.medalType.equals(that.medalType))
        return false;
    }

    boolean this_present_medalDescription = true && this.isSetMedalDescription();
    boolean that_present_medalDescription = true && that.isSetMedalDescription();
    if (this_present_medalDescription || that_present_medalDescription) {
      if (!(this_present_medalDescription && that_present_medalDescription))
        return false;
      if (!this.medalDescription.equals(that.medalDescription))
        return false;
    }

    boolean this_present_medalImgUrl = true && this.isSetMedalImgUrl();
    boolean that_present_medalImgUrl = true && that.isSetMedalImgUrl();
    if (this_present_medalImgUrl || that_present_medalImgUrl) {
      if (!(this_present_medalImgUrl && that_present_medalImgUrl))
        return false;
      if (!this.medalImgUrl.equals(that.medalImgUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MedalInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMedalType()).compareTo(other.isSetMedalType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedalType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medalType, other.medalType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedalDescription()).compareTo(other.isSetMedalDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedalDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medalDescription, other.medalDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedalImgUrl()).compareTo(other.isSetMedalImgUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedalImgUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medalImgUrl, other.medalImgUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MedalInfo(");
    boolean first = true;

    sb.append("medalType:");
    if (this.medalType == null) {
      sb.append("null");
    } else {
      sb.append(this.medalType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("medalDescription:");
    if (this.medalDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.medalDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("medalImgUrl:");
    if (this.medalImgUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.medalImgUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MedalInfoStandardSchemeFactory implements SchemeFactory {
    public MedalInfoStandardScheme getScheme() {
      return new MedalInfoStandardScheme();
    }
  }

  private static class MedalInfoStandardScheme extends StandardScheme<MedalInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MedalInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEDAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.medalType = iprot.readString();
              struct.setMedalTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEDAL_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.medalDescription = iprot.readString();
              struct.setMedalDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEDAL_IMG_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.medalImgUrl = iprot.readString();
              struct.setMedalImgUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MedalInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.medalType != null) {
        oprot.writeFieldBegin(MEDAL_TYPE_FIELD_DESC);
        oprot.writeString(struct.medalType);
        oprot.writeFieldEnd();
      }
      if (struct.medalDescription != null) {
        oprot.writeFieldBegin(MEDAL_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.medalDescription);
        oprot.writeFieldEnd();
      }
      if (struct.medalImgUrl != null) {
        oprot.writeFieldBegin(MEDAL_IMG_URL_FIELD_DESC);
        oprot.writeString(struct.medalImgUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MedalInfoTupleSchemeFactory implements SchemeFactory {
    public MedalInfoTupleScheme getScheme() {
      return new MedalInfoTupleScheme();
    }
  }

  private static class MedalInfoTupleScheme extends TupleScheme<MedalInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MedalInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMedalType()) {
        optionals.set(0);
      }
      if (struct.isSetMedalDescription()) {
        optionals.set(1);
      }
      if (struct.isSetMedalImgUrl()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMedalType()) {
        oprot.writeString(struct.medalType);
      }
      if (struct.isSetMedalDescription()) {
        oprot.writeString(struct.medalDescription);
      }
      if (struct.isSetMedalImgUrl()) {
        oprot.writeString(struct.medalImgUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MedalInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.medalType = iprot.readString();
        struct.setMedalTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.medalDescription = iprot.readString();
        struct.setMedalDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.medalImgUrl = iprot.readString();
        struct.setMedalImgUrlIsSet(true);
      }
    }
  }

}

