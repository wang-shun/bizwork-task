/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sogou.bizwork.task.api.tag.result;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TagResult implements org.apache.thrift.TBase<TagResult, TagResult._Fields>, java.io.Serializable, Cloneable, Comparable<TagResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TagResult");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TAG_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("tagTo", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("totalNumber", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPage", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TagResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TagResultTupleSchemeFactory());
  }

  public boolean status; // required
  public com.sogou.bizwork.task.api.common.error.ErrorCode errorCode; // optional
  public List<com.sogou.bizwork.task.api.tag.to.TagTo> tagTo; // optional
  public int totalNumber; // required
  public int totalPage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    ERROR_CODE((short)2, "errorCode"),
    TAG_TO((short)3, "tagTo"),
    TOTAL_NUMBER((short)4, "totalNumber"),
    TOTAL_PAGE((short)5, "totalPage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // ERROR_CODE
          return ERROR_CODE;
        case 3: // TAG_TO
          return TAG_TO;
        case 4: // TOTAL_NUMBER
          return TOTAL_NUMBER;
        case 5: // TOTAL_PAGE
          return TOTAL_PAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private static final int __TOTALNUMBER_ISSET_ID = 1;
  private static final int __TOTALPAGE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ERROR_CODE,_Fields.TAG_TO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sogou.bizwork.task.api.common.error.ErrorCode.class)));
    tmpMap.put(_Fields.TAG_TO, new org.apache.thrift.meta_data.FieldMetaData("tagTo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sogou.bizwork.task.api.tag.to.TagTo.class))));
    tmpMap.put(_Fields.TOTAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("totalNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_PAGE, new org.apache.thrift.meta_data.FieldMetaData("totalPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TagResult.class, metaDataMap);
  }

  public TagResult() {
    this.status = true;

  }

  public TagResult(
    boolean status,
    int totalNumber,
    int totalPage)
  {
    this();
    this.status = status;
    setStatusIsSet(true);
    this.totalNumber = totalNumber;
    setTotalNumberIsSet(true);
    this.totalPage = totalPage;
    setTotalPageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TagResult(TagResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.status = other.status;
    if (other.isSetErrorCode()) {
      this.errorCode = new com.sogou.bizwork.task.api.common.error.ErrorCode(other.errorCode);
    }
    if (other.isSetTagTo()) {
      List<com.sogou.bizwork.task.api.tag.to.TagTo> __this__tagTo = new ArrayList<com.sogou.bizwork.task.api.tag.to.TagTo>(other.tagTo.size());
      for (com.sogou.bizwork.task.api.tag.to.TagTo other_element : other.tagTo) {
        __this__tagTo.add(new com.sogou.bizwork.task.api.tag.to.TagTo(other_element));
      }
      this.tagTo = __this__tagTo;
    }
    this.totalNumber = other.totalNumber;
    this.totalPage = other.totalPage;
  }

  public TagResult deepCopy() {
    return new TagResult(this);
  }

  @Override
  public void clear() {
    this.status = true;

    this.errorCode = null;
    this.tagTo = null;
    setTotalNumberIsSet(false);
    this.totalNumber = 0;
    setTotalPageIsSet(false);
    this.totalPage = 0;
  }

  public boolean isStatus() {
    return this.status;
  }

  public TagResult setStatus(boolean status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public com.sogou.bizwork.task.api.common.error.ErrorCode getErrorCode() {
    return this.errorCode;
  }

  public TagResult setErrorCode(com.sogou.bizwork.task.api.common.error.ErrorCode errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  public void unsetErrorCode() {
    this.errorCode = null;
  }

  /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorCode() {
    return this.errorCode != null;
  }

  public void setErrorCodeIsSet(boolean value) {
    if (!value) {
      this.errorCode = null;
    }
  }

  public int getTagToSize() {
    return (this.tagTo == null) ? 0 : this.tagTo.size();
  }

  public java.util.Iterator<com.sogou.bizwork.task.api.tag.to.TagTo> getTagToIterator() {
    return (this.tagTo == null) ? null : this.tagTo.iterator();
  }

  public void addToTagTo(com.sogou.bizwork.task.api.tag.to.TagTo elem) {
    if (this.tagTo == null) {
      this.tagTo = new ArrayList<com.sogou.bizwork.task.api.tag.to.TagTo>();
    }
    this.tagTo.add(elem);
  }

  public List<com.sogou.bizwork.task.api.tag.to.TagTo> getTagTo() {
    return this.tagTo;
  }

  public TagResult setTagTo(List<com.sogou.bizwork.task.api.tag.to.TagTo> tagTo) {
    this.tagTo = tagTo;
    return this;
  }

  public void unsetTagTo() {
    this.tagTo = null;
  }

  /** Returns true if field tagTo is set (has been assigned a value) and false otherwise */
  public boolean isSetTagTo() {
    return this.tagTo != null;
  }

  public void setTagToIsSet(boolean value) {
    if (!value) {
      this.tagTo = null;
    }
  }

  public int getTotalNumber() {
    return this.totalNumber;
  }

  public TagResult setTotalNumber(int totalNumber) {
    this.totalNumber = totalNumber;
    setTotalNumberIsSet(true);
    return this;
  }

  public void unsetTotalNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALNUMBER_ISSET_ID);
  }

  /** Returns true if field totalNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALNUMBER_ISSET_ID);
  }

  public void setTotalNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALNUMBER_ISSET_ID, value);
  }

  public int getTotalPage() {
    return this.totalPage;
  }

  public TagResult setTotalPage(int totalPage) {
    this.totalPage = totalPage;
    setTotalPageIsSet(true);
    return this;
  }

  public void unsetTotalPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPAGE_ISSET_ID);
  }

  /** Returns true if field totalPage is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPage() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPAGE_ISSET_ID);
  }

  public void setTotalPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Boolean)value);
      }
      break;

    case ERROR_CODE:
      if (value == null) {
        unsetErrorCode();
      } else {
        setErrorCode((com.sogou.bizwork.task.api.common.error.ErrorCode)value);
      }
      break;

    case TAG_TO:
      if (value == null) {
        unsetTagTo();
      } else {
        setTagTo((List<com.sogou.bizwork.task.api.tag.to.TagTo>)value);
      }
      break;

    case TOTAL_NUMBER:
      if (value == null) {
        unsetTotalNumber();
      } else {
        setTotalNumber((Integer)value);
      }
      break;

    case TOTAL_PAGE:
      if (value == null) {
        unsetTotalPage();
      } else {
        setTotalPage((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return Boolean.valueOf(isStatus());

    case ERROR_CODE:
      return getErrorCode();

    case TAG_TO:
      return getTagTo();

    case TOTAL_NUMBER:
      return Integer.valueOf(getTotalNumber());

    case TOTAL_PAGE:
      return Integer.valueOf(getTotalPage());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case ERROR_CODE:
      return isSetErrorCode();
    case TAG_TO:
      return isSetTagTo();
    case TOTAL_NUMBER:
      return isSetTotalNumber();
    case TOTAL_PAGE:
      return isSetTotalPage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TagResult)
      return this.equals((TagResult)that);
    return false;
  }

  public boolean equals(TagResult that) {
    if (that == null)
      return false;

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_errorCode = true && this.isSetErrorCode();
    boolean that_present_errorCode = true && that.isSetErrorCode();
    if (this_present_errorCode || that_present_errorCode) {
      if (!(this_present_errorCode && that_present_errorCode))
        return false;
      if (!this.errorCode.equals(that.errorCode))
        return false;
    }

    boolean this_present_tagTo = true && this.isSetTagTo();
    boolean that_present_tagTo = true && that.isSetTagTo();
    if (this_present_tagTo || that_present_tagTo) {
      if (!(this_present_tagTo && that_present_tagTo))
        return false;
      if (!this.tagTo.equals(that.tagTo))
        return false;
    }

    boolean this_present_totalNumber = true;
    boolean that_present_totalNumber = true;
    if (this_present_totalNumber || that_present_totalNumber) {
      if (!(this_present_totalNumber && that_present_totalNumber))
        return false;
      if (this.totalNumber != that.totalNumber)
        return false;
    }

    boolean this_present_totalPage = true;
    boolean that_present_totalPage = true;
    if (this_present_totalPage || that_present_totalPage) {
      if (!(this_present_totalPage && that_present_totalPage))
        return false;
      if (this.totalPage != that.totalPage)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TagResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorCode()).compareTo(other.isSetErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagTo()).compareTo(other.isSetTagTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagTo, other.tagTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalNumber()).compareTo(other.isSetTotalNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalNumber, other.totalNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPage()).compareTo(other.isSetTotalPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPage, other.totalPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TagResult(");
    boolean first = true;

    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (isSetErrorCode()) {
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      if (this.errorCode == null) {
        sb.append("null");
      } else {
        sb.append(this.errorCode);
      }
      first = false;
    }
    if (isSetTagTo()) {
      if (!first) sb.append(", ");
      sb.append("tagTo:");
      if (this.tagTo == null) {
        sb.append("null");
      } else {
        sb.append(this.tagTo);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("totalNumber:");
    sb.append(this.totalNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPage:");
    sb.append(this.totalPage);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (errorCode != null) {
      errorCode.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TagResultStandardSchemeFactory implements SchemeFactory {
    public TagResultStandardScheme getScheme() {
      return new TagResultStandardScheme();
    }
  }

  private static class TagResultStandardScheme extends StandardScheme<TagResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TagResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.status = iprot.readBool();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.errorCode = new com.sogou.bizwork.task.api.common.error.ErrorCode();
              struct.errorCode.read(iprot);
              struct.setErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TAG_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tagTo = new ArrayList<com.sogou.bizwork.task.api.tag.to.TagTo>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.sogou.bizwork.task.api.tag.to.TagTo _elem2;
                  _elem2 = new com.sogou.bizwork.task.api.tag.to.TagTo();
                  _elem2.read(iprot);
                  struct.tagTo.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setTagToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalNumber = iprot.readI32();
              struct.setTotalNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPage = iprot.readI32();
              struct.setTotalPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TagResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeBool(struct.status);
      oprot.writeFieldEnd();
      if (struct.errorCode != null) {
        if (struct.isSetErrorCode()) {
          oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
          struct.errorCode.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tagTo != null) {
        if (struct.isSetTagTo()) {
          oprot.writeFieldBegin(TAG_TO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tagTo.size()));
            for (com.sogou.bizwork.task.api.tag.to.TagTo _iter3 : struct.tagTo)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(TOTAL_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.totalNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_PAGE_FIELD_DESC);
      oprot.writeI32(struct.totalPage);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TagResultTupleSchemeFactory implements SchemeFactory {
    public TagResultTupleScheme getScheme() {
      return new TagResultTupleScheme();
    }
  }

  private static class TagResultTupleScheme extends TupleScheme<TagResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TagResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetErrorCode()) {
        optionals.set(1);
      }
      if (struct.isSetTagTo()) {
        optionals.set(2);
      }
      if (struct.isSetTotalNumber()) {
        optionals.set(3);
      }
      if (struct.isSetTotalPage()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetStatus()) {
        oprot.writeBool(struct.status);
      }
      if (struct.isSetErrorCode()) {
        struct.errorCode.write(oprot);
      }
      if (struct.isSetTagTo()) {
        {
          oprot.writeI32(struct.tagTo.size());
          for (com.sogou.bizwork.task.api.tag.to.TagTo _iter4 : struct.tagTo)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetTotalNumber()) {
        oprot.writeI32(struct.totalNumber);
      }
      if (struct.isSetTotalPage()) {
        oprot.writeI32(struct.totalPage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TagResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.status = iprot.readBool();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errorCode = new com.sogou.bizwork.task.api.common.error.ErrorCode();
        struct.errorCode.read(iprot);
        struct.setErrorCodeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tagTo = new ArrayList<com.sogou.bizwork.task.api.tag.to.TagTo>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            com.sogou.bizwork.task.api.tag.to.TagTo _elem7;
            _elem7 = new com.sogou.bizwork.task.api.tag.to.TagTo();
            _elem7.read(iprot);
            struct.tagTo.add(_elem7);
          }
        }
        struct.setTagToIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalNumber = iprot.readI32();
        struct.setTotalNumberIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalPage = iprot.readI32();
        struct.setTotalPageIsSet(true);
      }
    }
  }

}

