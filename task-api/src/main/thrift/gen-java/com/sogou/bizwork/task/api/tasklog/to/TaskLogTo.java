/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sogou.bizwork.task.api.tasklog.to;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TaskLogTo implements org.apache.thrift.TBase<TaskLogTo, TaskLogTo._Fields>, java.io.Serializable, Cloneable, Comparable<TaskLogTo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskLogTo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("createUser", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CHARGE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeUser", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TASK_FOLLOWS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskFollows", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ATTACHMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("attachment", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField OPERATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operateType", org.apache.thrift.protocol.TType.BYTE, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField OPERATE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("operateUser", org.apache.thrift.protocol.TType.I64, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskLogToStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskLogToTupleSchemeFactory());
  }

  /**
   * 操作日志Id
   */
  public long id; // required
  /**
   * 任务Id
   */
  public long taskId; // required
  /**
   * 任务创建人
   */
  public long createUser; // required
  /**
   * 任务负责人
   */
  public long chargeUser; // required
  /**
   * 任务关注人ID
   */
  public String taskFollows; // required
  /**
   * 任务开始时间
   */
  public String startTime; // required
  /**
   * 任务结束时间
   */
  public String endTime; // required
  /**
   * 任务描述
   */
  public String description; // required
  /**
   * 任务附件
   */
  public String attachment; // required
  /**
   * 任务状态
   */
  public byte status; // required
  /**
   * 操作类型
   */
  public byte operateType; // required
  /**
   * 操作日志创建时间
   */
  public String createTime; // required
  /**
   * 操作人ID
   */
  public long operateUser; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 操作日志Id
     */
    ID((short)1, "id"),
    /**
     * 任务Id
     */
    TASK_ID((short)2, "taskId"),
    /**
     * 任务创建人
     */
    CREATE_USER((short)3, "createUser"),
    /**
     * 任务负责人
     */
    CHARGE_USER((short)4, "chargeUser"),
    /**
     * 任务关注人ID
     */
    TASK_FOLLOWS((short)5, "taskFollows"),
    /**
     * 任务开始时间
     */
    START_TIME((short)6, "startTime"),
    /**
     * 任务结束时间
     */
    END_TIME((short)7, "endTime"),
    /**
     * 任务描述
     */
    DESCRIPTION((short)8, "description"),
    /**
     * 任务附件
     */
    ATTACHMENT((short)9, "attachment"),
    /**
     * 任务状态
     */
    STATUS((short)10, "status"),
    /**
     * 操作类型
     */
    OPERATE_TYPE((short)11, "operateType"),
    /**
     * 操作日志创建时间
     */
    CREATE_TIME((short)12, "createTime"),
    /**
     * 操作人ID
     */
    OPERATE_USER((short)13, "operateUser");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TASK_ID
          return TASK_ID;
        case 3: // CREATE_USER
          return CREATE_USER;
        case 4: // CHARGE_USER
          return CHARGE_USER;
        case 5: // TASK_FOLLOWS
          return TASK_FOLLOWS;
        case 6: // START_TIME
          return START_TIME;
        case 7: // END_TIME
          return END_TIME;
        case 8: // DESCRIPTION
          return DESCRIPTION;
        case 9: // ATTACHMENT
          return ATTACHMENT;
        case 10: // STATUS
          return STATUS;
        case 11: // OPERATE_TYPE
          return OPERATE_TYPE;
        case 12: // CREATE_TIME
          return CREATE_TIME;
        case 13: // OPERATE_USER
          return OPERATE_USER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TASKID_ISSET_ID = 1;
  private static final int __CREATEUSER_ISSET_ID = 2;
  private static final int __CHARGEUSER_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __OPERATETYPE_ISSET_ID = 5;
  private static final int __OPERATEUSER_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_USER, new org.apache.thrift.meta_data.FieldMetaData("createUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHARGE_USER, new org.apache.thrift.meta_data.FieldMetaData("chargeUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASK_FOLLOWS, new org.apache.thrift.meta_data.FieldMetaData("taskFollows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTACHMENT, new org.apache.thrift.meta_data.FieldMetaData("attachment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.OPERATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operateType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATE_USER, new org.apache.thrift.meta_data.FieldMetaData("operateUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskLogTo.class, metaDataMap);
  }

  public TaskLogTo() {
  }

  public TaskLogTo(
    long id,
    long taskId,
    long createUser,
    long chargeUser,
    String taskFollows,
    String startTime,
    String endTime,
    String description,
    String attachment,
    byte status,
    byte operateType,
    String createTime,
    long operateUser)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.createUser = createUser;
    setCreateUserIsSet(true);
    this.chargeUser = chargeUser;
    setChargeUserIsSet(true);
    this.taskFollows = taskFollows;
    this.startTime = startTime;
    this.endTime = endTime;
    this.description = description;
    this.attachment = attachment;
    this.status = status;
    setStatusIsSet(true);
    this.operateType = operateType;
    setOperateTypeIsSet(true);
    this.createTime = createTime;
    this.operateUser = operateUser;
    setOperateUserIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskLogTo(TaskLogTo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.taskId = other.taskId;
    this.createUser = other.createUser;
    this.chargeUser = other.chargeUser;
    if (other.isSetTaskFollows()) {
      this.taskFollows = other.taskFollows;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetAttachment()) {
      this.attachment = other.attachment;
    }
    this.status = other.status;
    this.operateType = other.operateType;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.operateUser = other.operateUser;
  }

  public TaskLogTo deepCopy() {
    return new TaskLogTo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setTaskIdIsSet(false);
    this.taskId = 0;
    setCreateUserIsSet(false);
    this.createUser = 0;
    setChargeUserIsSet(false);
    this.chargeUser = 0;
    this.taskFollows = null;
    this.startTime = null;
    this.endTime = null;
    this.description = null;
    this.attachment = null;
    setStatusIsSet(false);
    this.status = 0;
    setOperateTypeIsSet(false);
    this.operateType = 0;
    this.createTime = null;
    setOperateUserIsSet(false);
    this.operateUser = 0;
  }

  /**
   * 操作日志Id
   */
  public long getId() {
    return this.id;
  }

  /**
   * 操作日志Id
   */
  public TaskLogTo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 任务Id
   */
  public long getTaskId() {
    return this.taskId;
  }

  /**
   * 任务Id
   */
  public TaskLogTo setTaskId(long taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  /**
   * 任务创建人
   */
  public long getCreateUser() {
    return this.createUser;
  }

  /**
   * 任务创建人
   */
  public TaskLogTo setCreateUser(long createUser) {
    this.createUser = createUser;
    setCreateUserIsSet(true);
    return this;
  }

  public void unsetCreateUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEUSER_ISSET_ID);
  }

  /** Returns true if field createUser is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateUser() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEUSER_ISSET_ID);
  }

  public void setCreateUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEUSER_ISSET_ID, value);
  }

  /**
   * 任务负责人
   */
  public long getChargeUser() {
    return this.chargeUser;
  }

  /**
   * 任务负责人
   */
  public TaskLogTo setChargeUser(long chargeUser) {
    this.chargeUser = chargeUser;
    setChargeUserIsSet(true);
    return this;
  }

  public void unsetChargeUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGEUSER_ISSET_ID);
  }

  /** Returns true if field chargeUser is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeUser() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGEUSER_ISSET_ID);
  }

  public void setChargeUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGEUSER_ISSET_ID, value);
  }

  /**
   * 任务关注人ID
   */
  public String getTaskFollows() {
    return this.taskFollows;
  }

  /**
   * 任务关注人ID
   */
  public TaskLogTo setTaskFollows(String taskFollows) {
    this.taskFollows = taskFollows;
    return this;
  }

  public void unsetTaskFollows() {
    this.taskFollows = null;
  }

  /** Returns true if field taskFollows is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskFollows() {
    return this.taskFollows != null;
  }

  public void setTaskFollowsIsSet(boolean value) {
    if (!value) {
      this.taskFollows = null;
    }
  }

  /**
   * 任务开始时间
   */
  public String getStartTime() {
    return this.startTime;
  }

  /**
   * 任务开始时间
   */
  public TaskLogTo setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  /**
   * 任务结束时间
   */
  public String getEndTime() {
    return this.endTime;
  }

  /**
   * 任务结束时间
   */
  public TaskLogTo setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  /**
   * 任务描述
   */
  public String getDescription() {
    return this.description;
  }

  /**
   * 任务描述
   */
  public TaskLogTo setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  /**
   * 任务附件
   */
  public String getAttachment() {
    return this.attachment;
  }

  /**
   * 任务附件
   */
  public TaskLogTo setAttachment(String attachment) {
    this.attachment = attachment;
    return this;
  }

  public void unsetAttachment() {
    this.attachment = null;
  }

  /** Returns true if field attachment is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachment() {
    return this.attachment != null;
  }

  public void setAttachmentIsSet(boolean value) {
    if (!value) {
      this.attachment = null;
    }
  }

  /**
   * 任务状态
   */
  public byte getStatus() {
    return this.status;
  }

  /**
   * 任务状态
   */
  public TaskLogTo setStatus(byte status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  /**
   * 操作类型
   */
  public byte getOperateType() {
    return this.operateType;
  }

  /**
   * 操作类型
   */
  public TaskLogTo setOperateType(byte operateType) {
    this.operateType = operateType;
    setOperateTypeIsSet(true);
    return this;
  }

  public void unsetOperateType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATETYPE_ISSET_ID);
  }

  /** Returns true if field operateType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperateType() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATETYPE_ISSET_ID);
  }

  public void setOperateTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATETYPE_ISSET_ID, value);
  }

  /**
   * 操作日志创建时间
   */
  public String getCreateTime() {
    return this.createTime;
  }

  /**
   * 操作日志创建时间
   */
  public TaskLogTo setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  /**
   * 操作人ID
   */
  public long getOperateUser() {
    return this.operateUser;
  }

  /**
   * 操作人ID
   */
  public TaskLogTo setOperateUser(long operateUser) {
    this.operateUser = operateUser;
    setOperateUserIsSet(true);
    return this;
  }

  public void unsetOperateUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATEUSER_ISSET_ID);
  }

  /** Returns true if field operateUser is set (has been assigned a value) and false otherwise */
  public boolean isSetOperateUser() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATEUSER_ISSET_ID);
  }

  public void setOperateUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATEUSER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Long)value);
      }
      break;

    case CREATE_USER:
      if (value == null) {
        unsetCreateUser();
      } else {
        setCreateUser((Long)value);
      }
      break;

    case CHARGE_USER:
      if (value == null) {
        unsetChargeUser();
      } else {
        setChargeUser((Long)value);
      }
      break;

    case TASK_FOLLOWS:
      if (value == null) {
        unsetTaskFollows();
      } else {
        setTaskFollows((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case ATTACHMENT:
      if (value == null) {
        unsetAttachment();
      } else {
        setAttachment((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Byte)value);
      }
      break;

    case OPERATE_TYPE:
      if (value == null) {
        unsetOperateType();
      } else {
        setOperateType((Byte)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case OPERATE_USER:
      if (value == null) {
        unsetOperateUser();
      } else {
        setOperateUser((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case TASK_ID:
      return Long.valueOf(getTaskId());

    case CREATE_USER:
      return Long.valueOf(getCreateUser());

    case CHARGE_USER:
      return Long.valueOf(getChargeUser());

    case TASK_FOLLOWS:
      return getTaskFollows();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case DESCRIPTION:
      return getDescription();

    case ATTACHMENT:
      return getAttachment();

    case STATUS:
      return Byte.valueOf(getStatus());

    case OPERATE_TYPE:
      return Byte.valueOf(getOperateType());

    case CREATE_TIME:
      return getCreateTime();

    case OPERATE_USER:
      return Long.valueOf(getOperateUser());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TASK_ID:
      return isSetTaskId();
    case CREATE_USER:
      return isSetCreateUser();
    case CHARGE_USER:
      return isSetChargeUser();
    case TASK_FOLLOWS:
      return isSetTaskFollows();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case DESCRIPTION:
      return isSetDescription();
    case ATTACHMENT:
      return isSetAttachment();
    case STATUS:
      return isSetStatus();
    case OPERATE_TYPE:
      return isSetOperateType();
    case CREATE_TIME:
      return isSetCreateTime();
    case OPERATE_USER:
      return isSetOperateUser();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskLogTo)
      return this.equals((TaskLogTo)that);
    return false;
  }

  public boolean equals(TaskLogTo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_createUser = true;
    boolean that_present_createUser = true;
    if (this_present_createUser || that_present_createUser) {
      if (!(this_present_createUser && that_present_createUser))
        return false;
      if (this.createUser != that.createUser)
        return false;
    }

    boolean this_present_chargeUser = true;
    boolean that_present_chargeUser = true;
    if (this_present_chargeUser || that_present_chargeUser) {
      if (!(this_present_chargeUser && that_present_chargeUser))
        return false;
      if (this.chargeUser != that.chargeUser)
        return false;
    }

    boolean this_present_taskFollows = true && this.isSetTaskFollows();
    boolean that_present_taskFollows = true && that.isSetTaskFollows();
    if (this_present_taskFollows || that_present_taskFollows) {
      if (!(this_present_taskFollows && that_present_taskFollows))
        return false;
      if (!this.taskFollows.equals(that.taskFollows))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_attachment = true && this.isSetAttachment();
    boolean that_present_attachment = true && that.isSetAttachment();
    if (this_present_attachment || that_present_attachment) {
      if (!(this_present_attachment && that_present_attachment))
        return false;
      if (!this.attachment.equals(that.attachment))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_operateType = true;
    boolean that_present_operateType = true;
    if (this_present_operateType || that_present_operateType) {
      if (!(this_present_operateType && that_present_operateType))
        return false;
      if (this.operateType != that.operateType)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_operateUser = true;
    boolean that_present_operateUser = true;
    if (this_present_operateUser || that_present_operateUser) {
      if (!(this_present_operateUser && that_present_operateUser))
        return false;
      if (this.operateUser != that.operateUser)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TaskLogTo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateUser()).compareTo(other.isSetCreateUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createUser, other.createUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeUser()).compareTo(other.isSetChargeUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeUser, other.chargeUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskFollows()).compareTo(other.isSetTaskFollows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskFollows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskFollows, other.taskFollows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttachment()).compareTo(other.isSetAttachment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachment, other.attachment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperateType()).compareTo(other.isSetOperateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateType, other.operateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperateUser()).compareTo(other.isSetOperateUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperateUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateUser, other.operateUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskLogTo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createUser:");
    sb.append(this.createUser);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeUser:");
    sb.append(this.chargeUser);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskFollows:");
    if (this.taskFollows == null) {
      sb.append("null");
    } else {
      sb.append(this.taskFollows);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attachment:");
    if (this.attachment == null) {
      sb.append("null");
    } else {
      sb.append(this.attachment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operateType:");
    sb.append(this.operateType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operateUser:");
    sb.append(this.operateUser);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskLogToStandardSchemeFactory implements SchemeFactory {
    public TaskLogToStandardScheme getScheme() {
      return new TaskLogToStandardScheme();
    }
  }

  private static class TaskLogToStandardScheme extends StandardScheme<TaskLogTo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskLogTo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.taskId = iprot.readI64();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createUser = iprot.readI64();
              struct.setCreateUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHARGE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chargeUser = iprot.readI64();
              struct.setChargeUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TASK_FOLLOWS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskFollows = iprot.readString();
              struct.setTaskFollowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ATTACHMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attachment = iprot.readString();
              struct.setAttachmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.status = iprot.readByte();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OPERATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.operateType = iprot.readByte();
              struct.setOperateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OPERATE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.operateUser = iprot.readI64();
              struct.setOperateUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskLogTo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI64(struct.taskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_USER_FIELD_DESC);
      oprot.writeI64(struct.createUser);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARGE_USER_FIELD_DESC);
      oprot.writeI64(struct.chargeUser);
      oprot.writeFieldEnd();
      if (struct.taskFollows != null) {
        oprot.writeFieldBegin(TASK_FOLLOWS_FIELD_DESC);
        oprot.writeString(struct.taskFollows);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.attachment != null) {
        oprot.writeFieldBegin(ATTACHMENT_FIELD_DESC);
        oprot.writeString(struct.attachment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeByte(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPERATE_TYPE_FIELD_DESC);
      oprot.writeByte(struct.operateType);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPERATE_USER_FIELD_DESC);
      oprot.writeI64(struct.operateUser);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskLogToTupleSchemeFactory implements SchemeFactory {
    public TaskLogToTupleScheme getScheme() {
      return new TaskLogToTupleScheme();
    }
  }

  private static class TaskLogToTupleScheme extends TupleScheme<TaskLogTo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskLogTo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTaskId()) {
        optionals.set(1);
      }
      if (struct.isSetCreateUser()) {
        optionals.set(2);
      }
      if (struct.isSetChargeUser()) {
        optionals.set(3);
      }
      if (struct.isSetTaskFollows()) {
        optionals.set(4);
      }
      if (struct.isSetStartTime()) {
        optionals.set(5);
      }
      if (struct.isSetEndTime()) {
        optionals.set(6);
      }
      if (struct.isSetDescription()) {
        optionals.set(7);
      }
      if (struct.isSetAttachment()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetOperateType()) {
        optionals.set(10);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(11);
      }
      if (struct.isSetOperateUser()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetTaskId()) {
        oprot.writeI64(struct.taskId);
      }
      if (struct.isSetCreateUser()) {
        oprot.writeI64(struct.createUser);
      }
      if (struct.isSetChargeUser()) {
        oprot.writeI64(struct.chargeUser);
      }
      if (struct.isSetTaskFollows()) {
        oprot.writeString(struct.taskFollows);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetAttachment()) {
        oprot.writeString(struct.attachment);
      }
      if (struct.isSetStatus()) {
        oprot.writeByte(struct.status);
      }
      if (struct.isSetOperateType()) {
        oprot.writeByte(struct.operateType);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetOperateUser()) {
        oprot.writeI64(struct.operateUser);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskLogTo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.taskId = iprot.readI64();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createUser = iprot.readI64();
        struct.setCreateUserIsSet(true);
      }
      if (incoming.get(3)) {
        struct.chargeUser = iprot.readI64();
        struct.setChargeUserIsSet(true);
      }
      if (incoming.get(4)) {
        struct.taskFollows = iprot.readString();
        struct.setTaskFollowsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.attachment = iprot.readString();
        struct.setAttachmentIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readByte();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.operateType = iprot.readByte();
        struct.setOperateTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.operateUser = iprot.readI64();
        struct.setOperateUserIsSet(true);
      }
    }
  }

}

