/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sogou.bizwork.task.api.task.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TaskTService {

  public interface Iface {

    /**
     * @description 查询指定用户的任务
     * @param userId 负责人ID
     * @param viewType 视图类型，0：状态视图，1：标签视图
     * @param userType 条件用户是负责人还是关注人,0:负责人，2：关注人
     * @return
     * 
     * @param userId
     * @param viewType
     * @param userType
     */
    public com.sogou.bizwork.task.api.task.result.TaskResult queryUserTaskByStatusOrTag(long userId, int viewType, int userType) throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException;

    /**
     * @description 查询指定任务详情
     * @param userId 任务ID
     * @return
     * 
     * @param taskId
     */
    public com.sogou.bizwork.task.api.task.result.TaskResult queryTaskInfo(long taskId) throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException;

    /**
     * @description 添加任务
     * @param taskTo
     * @param operateUser 操作用户ID
     * @return
     * 
     * @param taskTo
     * @param operateUser
     */
    public com.sogou.bizwork.task.api.task.result.TaskResult addTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser) throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException;

    /**
     * @description 更新指定任务ID的任务详情
     * @param taskTo 更新后的任务
     * @param operateUser 操作用户ID
     * @return
     * 
     * @param taskTo
     * @param operateUser
     */
    public com.sogou.bizwork.task.api.task.result.TaskResult updateTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser) throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException;

    /**
     * @description 删除任务
     * @param taskTo 任务
     * @param operateUser 操作用户ID
     * @return
     * 
     * @param taskTo
     * @param operateUser
     */
    public com.sogou.bizwork.task.api.task.result.TaskResult deleteTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser) throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryUserTaskByStatusOrTag(long userId, int viewType, int userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryTaskInfo(long taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult queryUserTaskByStatusOrTag(long userId, int viewType, int userType) throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException
    {
      send_queryUserTaskByStatusOrTag(userId, viewType, userType);
      return recv_queryUserTaskByStatusOrTag();
    }

    public void send_queryUserTaskByStatusOrTag(long userId, int viewType, int userType) throws org.apache.thrift.TException
    {
      queryUserTaskByStatusOrTag_args args = new queryUserTaskByStatusOrTag_args();
      args.setUserId(userId);
      args.setViewType(viewType);
      args.setUserType(userType);
      sendBase("queryUserTaskByStatusOrTag", args);
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult recv_queryUserTaskByStatusOrTag() throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException
    {
      queryUserTaskByStatusOrTag_result result = new queryUserTaskByStatusOrTag_result();
      receiveBase(result, "queryUserTaskByStatusOrTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryUserTaskByStatusOrTag failed: unknown result");
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult queryTaskInfo(long taskId) throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException
    {
      send_queryTaskInfo(taskId);
      return recv_queryTaskInfo();
    }

    public void send_queryTaskInfo(long taskId) throws org.apache.thrift.TException
    {
      queryTaskInfo_args args = new queryTaskInfo_args();
      args.setTaskId(taskId);
      sendBase("queryTaskInfo", args);
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult recv_queryTaskInfo() throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException
    {
      queryTaskInfo_result result = new queryTaskInfo_result();
      receiveBase(result, "queryTaskInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTaskInfo failed: unknown result");
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult addTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser) throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException
    {
      send_addTask(taskTo, operateUser);
      return recv_addTask();
    }

    public void send_addTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser) throws org.apache.thrift.TException
    {
      addTask_args args = new addTask_args();
      args.setTaskTo(taskTo);
      args.setOperateUser(operateUser);
      sendBase("addTask", args);
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult recv_addTask() throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException
    {
      addTask_result result = new addTask_result();
      receiveBase(result, "addTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTask failed: unknown result");
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult updateTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser) throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException
    {
      send_updateTask(taskTo, operateUser);
      return recv_updateTask();
    }

    public void send_updateTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser) throws org.apache.thrift.TException
    {
      updateTask_args args = new updateTask_args();
      args.setTaskTo(taskTo);
      args.setOperateUser(operateUser);
      sendBase("updateTask", args);
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult recv_updateTask() throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException
    {
      updateTask_result result = new updateTask_result();
      receiveBase(result, "updateTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTask failed: unknown result");
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult deleteTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser) throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException
    {
      send_deleteTask(taskTo, operateUser);
      return recv_deleteTask();
    }

    public void send_deleteTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser) throws org.apache.thrift.TException
    {
      deleteTask_args args = new deleteTask_args();
      args.setTaskTo(taskTo);
      args.setOperateUser(operateUser);
      sendBase("deleteTask", args);
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult recv_deleteTask() throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException
    {
      deleteTask_result result = new deleteTask_result();
      receiveBase(result, "deleteTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteTask failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryUserTaskByStatusOrTag(long userId, int viewType, int userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryUserTaskByStatusOrTag_call method_call = new queryUserTaskByStatusOrTag_call(userId, viewType, userType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryUserTaskByStatusOrTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      private int viewType;
      private int userType;
      public queryUserTaskByStatusOrTag_call(long userId, int viewType, int userType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.viewType = viewType;
        this.userType = userType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryUserTaskByStatusOrTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryUserTaskByStatusOrTag_args args = new queryUserTaskByStatusOrTag_args();
        args.setUserId(userId);
        args.setViewType(viewType);
        args.setUserType(userType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.sogou.bizwork.task.api.task.result.TaskResult getResult() throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryUserTaskByStatusOrTag();
      }
    }

    public void queryTaskInfo(long taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTaskInfo_call method_call = new queryTaskInfo_call(taskId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTaskInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long taskId;
      public queryTaskInfo_call(long taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTaskInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTaskInfo_args args = new queryTaskInfo_args();
        args.setTaskId(taskId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.sogou.bizwork.task.api.task.result.TaskResult getResult() throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTaskInfo();
      }
    }

    public void addTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addTask_call method_call = new addTask_call(taskTo, operateUser, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.sogou.bizwork.task.api.task.to.TaskTo taskTo;
      private long operateUser;
      public addTask_call(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskTo = taskTo;
        this.operateUser = operateUser;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addTask_args args = new addTask_args();
        args.setTaskTo(taskTo);
        args.setOperateUser(operateUser);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.sogou.bizwork.task.api.task.result.TaskResult getResult() throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addTask();
      }
    }

    public void updateTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTask_call method_call = new updateTask_call(taskTo, operateUser, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.sogou.bizwork.task.api.task.to.TaskTo taskTo;
      private long operateUser;
      public updateTask_call(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskTo = taskTo;
        this.operateUser = operateUser;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTask_args args = new updateTask_args();
        args.setTaskTo(taskTo);
        args.setOperateUser(operateUser);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.sogou.bizwork.task.api.task.result.TaskResult getResult() throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTask();
      }
    }

    public void deleteTask(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteTask_call method_call = new deleteTask_call(taskTo, operateUser, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.sogou.bizwork.task.api.task.to.TaskTo taskTo;
      private long operateUser;
      public deleteTask_call(com.sogou.bizwork.task.api.task.to.TaskTo taskTo, long operateUser, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskTo = taskTo;
        this.operateUser = operateUser;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteTask_args args = new deleteTask_args();
        args.setTaskTo(taskTo);
        args.setOperateUser(operateUser);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.sogou.bizwork.task.api.task.result.TaskResult getResult() throws com.sogou.bizwork.task.api.common.exception.ApiTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteTask();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryUserTaskByStatusOrTag", new queryUserTaskByStatusOrTag());
      processMap.put("queryTaskInfo", new queryTaskInfo());
      processMap.put("addTask", new addTask());
      processMap.put("updateTask", new updateTask());
      processMap.put("deleteTask", new deleteTask());
      return processMap;
    }

    public static class queryUserTaskByStatusOrTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryUserTaskByStatusOrTag_args> {
      public queryUserTaskByStatusOrTag() {
        super("queryUserTaskByStatusOrTag");
      }

      public queryUserTaskByStatusOrTag_args getEmptyArgsInstance() {
        return new queryUserTaskByStatusOrTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryUserTaskByStatusOrTag_result getResult(I iface, queryUserTaskByStatusOrTag_args args) throws org.apache.thrift.TException {
        queryUserTaskByStatusOrTag_result result = new queryUserTaskByStatusOrTag_result();
        try {
          result.success = iface.queryUserTaskByStatusOrTag(args.userId, args.viewType, args.userType);
        } catch (com.sogou.bizwork.task.api.common.exception.ApiTException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class queryTaskInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTaskInfo_args> {
      public queryTaskInfo() {
        super("queryTaskInfo");
      }

      public queryTaskInfo_args getEmptyArgsInstance() {
        return new queryTaskInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryTaskInfo_result getResult(I iface, queryTaskInfo_args args) throws org.apache.thrift.TException {
        queryTaskInfo_result result = new queryTaskInfo_result();
        try {
          result.success = iface.queryTaskInfo(args.taskId);
        } catch (com.sogou.bizwork.task.api.common.exception.ApiTException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class addTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addTask_args> {
      public addTask() {
        super("addTask");
      }

      public addTask_args getEmptyArgsInstance() {
        return new addTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addTask_result getResult(I iface, addTask_args args) throws org.apache.thrift.TException {
        addTask_result result = new addTask_result();
        try {
          result.success = iface.addTask(args.taskTo, args.operateUser);
        } catch (com.sogou.bizwork.task.api.common.exception.ApiTException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class updateTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTask_args> {
      public updateTask() {
        super("updateTask");
      }

      public updateTask_args getEmptyArgsInstance() {
        return new updateTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTask_result getResult(I iface, updateTask_args args) throws org.apache.thrift.TException {
        updateTask_result result = new updateTask_result();
        try {
          result.success = iface.updateTask(args.taskTo, args.operateUser);
        } catch (com.sogou.bizwork.task.api.common.exception.ApiTException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class deleteTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteTask_args> {
      public deleteTask() {
        super("deleteTask");
      }

      public deleteTask_args getEmptyArgsInstance() {
        return new deleteTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteTask_result getResult(I iface, deleteTask_args args) throws org.apache.thrift.TException {
        deleteTask_result result = new deleteTask_result();
        try {
          result.success = iface.deleteTask(args.taskTo, args.operateUser);
        } catch (com.sogou.bizwork.task.api.common.exception.ApiTException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryUserTaskByStatusOrTag", new queryUserTaskByStatusOrTag());
      processMap.put("queryTaskInfo", new queryTaskInfo());
      processMap.put("addTask", new addTask());
      processMap.put("updateTask", new updateTask());
      processMap.put("deleteTask", new deleteTask());
      return processMap;
    }

    public static class queryUserTaskByStatusOrTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryUserTaskByStatusOrTag_args, com.sogou.bizwork.task.api.task.result.TaskResult> {
      public queryUserTaskByStatusOrTag() {
        super("queryUserTaskByStatusOrTag");
      }

      public queryUserTaskByStatusOrTag_args getEmptyArgsInstance() {
        return new queryUserTaskByStatusOrTag_args();
      }

      public AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult>() { 
          public void onComplete(com.sogou.bizwork.task.api.task.result.TaskResult o) {
            queryUserTaskByStatusOrTag_result result = new queryUserTaskByStatusOrTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryUserTaskByStatusOrTag_result result = new queryUserTaskByStatusOrTag_result();
            if (e instanceof com.sogou.bizwork.task.api.common.exception.ApiTException) {
                        result.ex = (com.sogou.bizwork.task.api.common.exception.ApiTException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryUserTaskByStatusOrTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult> resultHandler) throws TException {
        iface.queryUserTaskByStatusOrTag(args.userId, args.viewType, args.userType,resultHandler);
      }
    }

    public static class queryTaskInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryTaskInfo_args, com.sogou.bizwork.task.api.task.result.TaskResult> {
      public queryTaskInfo() {
        super("queryTaskInfo");
      }

      public queryTaskInfo_args getEmptyArgsInstance() {
        return new queryTaskInfo_args();
      }

      public AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult>() { 
          public void onComplete(com.sogou.bizwork.task.api.task.result.TaskResult o) {
            queryTaskInfo_result result = new queryTaskInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryTaskInfo_result result = new queryTaskInfo_result();
            if (e instanceof com.sogou.bizwork.task.api.common.exception.ApiTException) {
                        result.ex = (com.sogou.bizwork.task.api.common.exception.ApiTException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryTaskInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult> resultHandler) throws TException {
        iface.queryTaskInfo(args.taskId,resultHandler);
      }
    }

    public static class addTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addTask_args, com.sogou.bizwork.task.api.task.result.TaskResult> {
      public addTask() {
        super("addTask");
      }

      public addTask_args getEmptyArgsInstance() {
        return new addTask_args();
      }

      public AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult>() { 
          public void onComplete(com.sogou.bizwork.task.api.task.result.TaskResult o) {
            addTask_result result = new addTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addTask_result result = new addTask_result();
            if (e instanceof com.sogou.bizwork.task.api.common.exception.ApiTException) {
                        result.ex = (com.sogou.bizwork.task.api.common.exception.ApiTException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addTask_args args, org.apache.thrift.async.AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult> resultHandler) throws TException {
        iface.addTask(args.taskTo, args.operateUser,resultHandler);
      }
    }

    public static class updateTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateTask_args, com.sogou.bizwork.task.api.task.result.TaskResult> {
      public updateTask() {
        super("updateTask");
      }

      public updateTask_args getEmptyArgsInstance() {
        return new updateTask_args();
      }

      public AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult>() { 
          public void onComplete(com.sogou.bizwork.task.api.task.result.TaskResult o) {
            updateTask_result result = new updateTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateTask_result result = new updateTask_result();
            if (e instanceof com.sogou.bizwork.task.api.common.exception.ApiTException) {
                        result.ex = (com.sogou.bizwork.task.api.common.exception.ApiTException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateTask_args args, org.apache.thrift.async.AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult> resultHandler) throws TException {
        iface.updateTask(args.taskTo, args.operateUser,resultHandler);
      }
    }

    public static class deleteTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteTask_args, com.sogou.bizwork.task.api.task.result.TaskResult> {
      public deleteTask() {
        super("deleteTask");
      }

      public deleteTask_args getEmptyArgsInstance() {
        return new deleteTask_args();
      }

      public AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult>() { 
          public void onComplete(com.sogou.bizwork.task.api.task.result.TaskResult o) {
            deleteTask_result result = new deleteTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteTask_result result = new deleteTask_result();
            if (e instanceof com.sogou.bizwork.task.api.common.exception.ApiTException) {
                        result.ex = (com.sogou.bizwork.task.api.common.exception.ApiTException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteTask_args args, org.apache.thrift.async.AsyncMethodCallback<com.sogou.bizwork.task.api.task.result.TaskResult> resultHandler) throws TException {
        iface.deleteTask(args.taskTo, args.operateUser,resultHandler);
      }
    }

  }

  public static class queryUserTaskByStatusOrTag_args implements org.apache.thrift.TBase<queryUserTaskByStatusOrTag_args, queryUserTaskByStatusOrTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserTaskByStatusOrTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserTaskByStatusOrTag_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField VIEW_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("viewType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUserTaskByStatusOrTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUserTaskByStatusOrTag_argsTupleSchemeFactory());
    }

    public long userId; // required
    public int viewType; // required
    public int userType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      VIEW_TYPE((short)2, "viewType"),
      USER_TYPE((short)3, "userType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // VIEW_TYPE
            return VIEW_TYPE;
          case 3: // USER_TYPE
            return USER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __VIEWTYPE_ISSET_ID = 1;
    private static final int __USERTYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.VIEW_TYPE, new org.apache.thrift.meta_data.FieldMetaData("viewType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserTaskByStatusOrTag_args.class, metaDataMap);
    }

    public queryUserTaskByStatusOrTag_args() {
    }

    public queryUserTaskByStatusOrTag_args(
      long userId,
      int viewType,
      int userType)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.viewType = viewType;
      setViewTypeIsSet(true);
      this.userType = userType;
      setUserTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserTaskByStatusOrTag_args(queryUserTaskByStatusOrTag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.viewType = other.viewType;
      this.userType = other.userType;
    }

    public queryUserTaskByStatusOrTag_args deepCopy() {
      return new queryUserTaskByStatusOrTag_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setViewTypeIsSet(false);
      this.viewType = 0;
      setUserTypeIsSet(false);
      this.userType = 0;
    }

    public long getUserId() {
      return this.userId;
    }

    public queryUserTaskByStatusOrTag_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getViewType() {
      return this.viewType;
    }

    public queryUserTaskByStatusOrTag_args setViewType(int viewType) {
      this.viewType = viewType;
      setViewTypeIsSet(true);
      return this;
    }

    public void unsetViewType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWTYPE_ISSET_ID);
    }

    /** Returns true if field viewType is set (has been assigned a value) and false otherwise */
    public boolean isSetViewType() {
      return EncodingUtils.testBit(__isset_bitfield, __VIEWTYPE_ISSET_ID);
    }

    public void setViewTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWTYPE_ISSET_ID, value);
    }

    public int getUserType() {
      return this.userType;
    }

    public queryUserTaskByStatusOrTag_args setUserType(int userType) {
      this.userType = userType;
      setUserTypeIsSet(true);
      return this;
    }

    public void unsetUserType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return EncodingUtils.testBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    public void setUserTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case VIEW_TYPE:
        if (value == null) {
          unsetViewType();
        } else {
          setViewType((Integer)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Long.valueOf(getUserId());

      case VIEW_TYPE:
        return Integer.valueOf(getViewType());

      case USER_TYPE:
        return Integer.valueOf(getUserType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case VIEW_TYPE:
        return isSetViewType();
      case USER_TYPE:
        return isSetUserType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserTaskByStatusOrTag_args)
        return this.equals((queryUserTaskByStatusOrTag_args)that);
      return false;
    }

    public boolean equals(queryUserTaskByStatusOrTag_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_viewType = true;
      boolean that_present_viewType = true;
      if (this_present_viewType || that_present_viewType) {
        if (!(this_present_viewType && that_present_viewType))
          return false;
        if (this.viewType != that.viewType)
          return false;
      }

      boolean this_present_userType = true;
      boolean that_present_userType = true;
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (this.userType != that.userType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryUserTaskByStatusOrTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetViewType()).compareTo(other.isSetViewType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetViewType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewType, other.viewType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUserTaskByStatusOrTag_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("viewType:");
      sb.append(this.viewType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      sb.append(this.userType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserTaskByStatusOrTag_argsStandardSchemeFactory implements SchemeFactory {
      public queryUserTaskByStatusOrTag_argsStandardScheme getScheme() {
        return new queryUserTaskByStatusOrTag_argsStandardScheme();
      }
    }

    private static class queryUserTaskByStatusOrTag_argsStandardScheme extends StandardScheme<queryUserTaskByStatusOrTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserTaskByStatusOrTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VIEW_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.viewType = iprot.readI32();
                struct.setViewTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userType = iprot.readI32();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserTaskByStatusOrTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VIEW_TYPE_FIELD_DESC);
        oprot.writeI32(struct.viewType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.userType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserTaskByStatusOrTag_argsTupleSchemeFactory implements SchemeFactory {
      public queryUserTaskByStatusOrTag_argsTupleScheme getScheme() {
        return new queryUserTaskByStatusOrTag_argsTupleScheme();
      }
    }

    private static class queryUserTaskByStatusOrTag_argsTupleScheme extends TupleScheme<queryUserTaskByStatusOrTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserTaskByStatusOrTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetViewType()) {
          optionals.set(1);
        }
        if (struct.isSetUserType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetViewType()) {
          oprot.writeI32(struct.viewType);
        }
        if (struct.isSetUserType()) {
          oprot.writeI32(struct.userType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserTaskByStatusOrTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.viewType = iprot.readI32();
          struct.setViewTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userType = iprot.readI32();
          struct.setUserTypeIsSet(true);
        }
      }
    }

  }

  public static class queryUserTaskByStatusOrTag_result implements org.apache.thrift.TBase<queryUserTaskByStatusOrTag_result, queryUserTaskByStatusOrTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserTaskByStatusOrTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserTaskByStatusOrTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUserTaskByStatusOrTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUserTaskByStatusOrTag_resultTupleSchemeFactory());
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult success; // required
    public com.sogou.bizwork.task.api.common.exception.ApiTException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sogou.bizwork.task.api.task.result.TaskResult.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserTaskByStatusOrTag_result.class, metaDataMap);
    }

    public queryUserTaskByStatusOrTag_result() {
    }

    public queryUserTaskByStatusOrTag_result(
      com.sogou.bizwork.task.api.task.result.TaskResult success,
      com.sogou.bizwork.task.api.common.exception.ApiTException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserTaskByStatusOrTag_result(queryUserTaskByStatusOrTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.sogou.bizwork.task.api.task.result.TaskResult(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException(other.ex);
      }
    }

    public queryUserTaskByStatusOrTag_result deepCopy() {
      return new queryUserTaskByStatusOrTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult getSuccess() {
      return this.success;
    }

    public queryUserTaskByStatusOrTag_result setSuccess(com.sogou.bizwork.task.api.task.result.TaskResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.sogou.bizwork.task.api.common.exception.ApiTException getEx() {
      return this.ex;
    }

    public queryUserTaskByStatusOrTag_result setEx(com.sogou.bizwork.task.api.common.exception.ApiTException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.sogou.bizwork.task.api.task.result.TaskResult)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.sogou.bizwork.task.api.common.exception.ApiTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserTaskByStatusOrTag_result)
        return this.equals((queryUserTaskByStatusOrTag_result)that);
      return false;
    }

    public boolean equals(queryUserTaskByStatusOrTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryUserTaskByStatusOrTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUserTaskByStatusOrTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserTaskByStatusOrTag_resultStandardSchemeFactory implements SchemeFactory {
      public queryUserTaskByStatusOrTag_resultStandardScheme getScheme() {
        return new queryUserTaskByStatusOrTag_resultStandardScheme();
      }
    }

    private static class queryUserTaskByStatusOrTag_resultStandardScheme extends StandardScheme<queryUserTaskByStatusOrTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserTaskByStatusOrTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.sogou.bizwork.task.api.task.result.TaskResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserTaskByStatusOrTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserTaskByStatusOrTag_resultTupleSchemeFactory implements SchemeFactory {
      public queryUserTaskByStatusOrTag_resultTupleScheme getScheme() {
        return new queryUserTaskByStatusOrTag_resultTupleScheme();
      }
    }

    private static class queryUserTaskByStatusOrTag_resultTupleScheme extends TupleScheme<queryUserTaskByStatusOrTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserTaskByStatusOrTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserTaskByStatusOrTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.sogou.bizwork.task.api.task.result.TaskResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class queryTaskInfo_args implements org.apache.thrift.TBase<queryTaskInfo_args, queryTaskInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTaskInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTaskInfo_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTaskInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTaskInfo_argsTupleSchemeFactory());
    }

    public long taskId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTaskInfo_args.class, metaDataMap);
    }

    public queryTaskInfo_args() {
    }

    public queryTaskInfo_args(
      long taskId)
    {
      this();
      this.taskId = taskId;
      setTaskIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTaskInfo_args(queryTaskInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.taskId = other.taskId;
    }

    public queryTaskInfo_args deepCopy() {
      return new queryTaskInfo_args(this);
    }

    @Override
    public void clear() {
      setTaskIdIsSet(false);
      this.taskId = 0;
    }

    public long getTaskId() {
      return this.taskId;
    }

    public queryTaskInfo_args setTaskId(long taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
      return this;
    }

    public void unsetTaskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return Long.valueOf(getTaskId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTaskInfo_args)
        return this.equals((queryTaskInfo_args)that);
      return false;
    }

    public boolean equals(queryTaskInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryTaskInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTaskInfo_args(");
      boolean first = true;

      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTaskInfo_argsStandardSchemeFactory implements SchemeFactory {
      public queryTaskInfo_argsStandardScheme getScheme() {
        return new queryTaskInfo_argsStandardScheme();
      }
    }

    private static class queryTaskInfo_argsStandardScheme extends StandardScheme<queryTaskInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTaskInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskId = iprot.readI64();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTaskInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTaskInfo_argsTupleSchemeFactory implements SchemeFactory {
      public queryTaskInfo_argsTupleScheme getScheme() {
        return new queryTaskInfo_argsTupleScheme();
      }
    }

    private static class queryTaskInfo_argsTupleScheme extends TupleScheme<queryTaskInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTaskInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTaskId()) {
          oprot.writeI64(struct.taskId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTaskInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.taskId = iprot.readI64();
          struct.setTaskIdIsSet(true);
        }
      }
    }

  }

  public static class queryTaskInfo_result implements org.apache.thrift.TBase<queryTaskInfo_result, queryTaskInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTaskInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTaskInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTaskInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTaskInfo_resultTupleSchemeFactory());
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult success; // required
    public com.sogou.bizwork.task.api.common.exception.ApiTException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sogou.bizwork.task.api.task.result.TaskResult.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTaskInfo_result.class, metaDataMap);
    }

    public queryTaskInfo_result() {
    }

    public queryTaskInfo_result(
      com.sogou.bizwork.task.api.task.result.TaskResult success,
      com.sogou.bizwork.task.api.common.exception.ApiTException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTaskInfo_result(queryTaskInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.sogou.bizwork.task.api.task.result.TaskResult(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException(other.ex);
      }
    }

    public queryTaskInfo_result deepCopy() {
      return new queryTaskInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult getSuccess() {
      return this.success;
    }

    public queryTaskInfo_result setSuccess(com.sogou.bizwork.task.api.task.result.TaskResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.sogou.bizwork.task.api.common.exception.ApiTException getEx() {
      return this.ex;
    }

    public queryTaskInfo_result setEx(com.sogou.bizwork.task.api.common.exception.ApiTException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.sogou.bizwork.task.api.task.result.TaskResult)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.sogou.bizwork.task.api.common.exception.ApiTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTaskInfo_result)
        return this.equals((queryTaskInfo_result)that);
      return false;
    }

    public boolean equals(queryTaskInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryTaskInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTaskInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTaskInfo_resultStandardSchemeFactory implements SchemeFactory {
      public queryTaskInfo_resultStandardScheme getScheme() {
        return new queryTaskInfo_resultStandardScheme();
      }
    }

    private static class queryTaskInfo_resultStandardScheme extends StandardScheme<queryTaskInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTaskInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.sogou.bizwork.task.api.task.result.TaskResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTaskInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTaskInfo_resultTupleSchemeFactory implements SchemeFactory {
      public queryTaskInfo_resultTupleScheme getScheme() {
        return new queryTaskInfo_resultTupleScheme();
      }
    }

    private static class queryTaskInfo_resultTupleScheme extends TupleScheme<queryTaskInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTaskInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTaskInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.sogou.bizwork.task.api.task.result.TaskResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class addTask_args implements org.apache.thrift.TBase<addTask_args, addTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<addTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTask_args");

    private static final org.apache.thrift.protocol.TField TASK_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("taskTo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPERATE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("operateUser", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTask_argsTupleSchemeFactory());
    }

    public com.sogou.bizwork.task.api.task.to.TaskTo taskTo; // required
    public long operateUser; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_TO((short)1, "taskTo"),
      OPERATE_USER((short)2, "operateUser");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_TO
            return TASK_TO;
          case 2: // OPERATE_USER
            return OPERATE_USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OPERATEUSER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_TO, new org.apache.thrift.meta_data.FieldMetaData("taskTo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sogou.bizwork.task.api.task.to.TaskTo.class)));
      tmpMap.put(_Fields.OPERATE_USER, new org.apache.thrift.meta_data.FieldMetaData("operateUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTask_args.class, metaDataMap);
    }

    public addTask_args() {
    }

    public addTask_args(
      com.sogou.bizwork.task.api.task.to.TaskTo taskTo,
      long operateUser)
    {
      this();
      this.taskTo = taskTo;
      this.operateUser = operateUser;
      setOperateUserIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTask_args(addTask_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTaskTo()) {
        this.taskTo = new com.sogou.bizwork.task.api.task.to.TaskTo(other.taskTo);
      }
      this.operateUser = other.operateUser;
    }

    public addTask_args deepCopy() {
      return new addTask_args(this);
    }

    @Override
    public void clear() {
      this.taskTo = null;
      setOperateUserIsSet(false);
      this.operateUser = 0;
    }

    public com.sogou.bizwork.task.api.task.to.TaskTo getTaskTo() {
      return this.taskTo;
    }

    public addTask_args setTaskTo(com.sogou.bizwork.task.api.task.to.TaskTo taskTo) {
      this.taskTo = taskTo;
      return this;
    }

    public void unsetTaskTo() {
      this.taskTo = null;
    }

    /** Returns true if field taskTo is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskTo() {
      return this.taskTo != null;
    }

    public void setTaskToIsSet(boolean value) {
      if (!value) {
        this.taskTo = null;
      }
    }

    public long getOperateUser() {
      return this.operateUser;
    }

    public addTask_args setOperateUser(long operateUser) {
      this.operateUser = operateUser;
      setOperateUserIsSet(true);
      return this;
    }

    public void unsetOperateUser() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATEUSER_ISSET_ID);
    }

    /** Returns true if field operateUser is set (has been assigned a value) and false otherwise */
    public boolean isSetOperateUser() {
      return EncodingUtils.testBit(__isset_bitfield, __OPERATEUSER_ISSET_ID);
    }

    public void setOperateUserIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATEUSER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_TO:
        if (value == null) {
          unsetTaskTo();
        } else {
          setTaskTo((com.sogou.bizwork.task.api.task.to.TaskTo)value);
        }
        break;

      case OPERATE_USER:
        if (value == null) {
          unsetOperateUser();
        } else {
          setOperateUser((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_TO:
        return getTaskTo();

      case OPERATE_USER:
        return Long.valueOf(getOperateUser());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_TO:
        return isSetTaskTo();
      case OPERATE_USER:
        return isSetOperateUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTask_args)
        return this.equals((addTask_args)that);
      return false;
    }

    public boolean equals(addTask_args that) {
      if (that == null)
        return false;

      boolean this_present_taskTo = true && this.isSetTaskTo();
      boolean that_present_taskTo = true && that.isSetTaskTo();
      if (this_present_taskTo || that_present_taskTo) {
        if (!(this_present_taskTo && that_present_taskTo))
          return false;
        if (!this.taskTo.equals(that.taskTo))
          return false;
      }

      boolean this_present_operateUser = true;
      boolean that_present_operateUser = true;
      if (this_present_operateUser || that_present_operateUser) {
        if (!(this_present_operateUser && that_present_operateUser))
          return false;
        if (this.operateUser != that.operateUser)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskTo()).compareTo(other.isSetTaskTo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskTo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskTo, other.taskTo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperateUser()).compareTo(other.isSetOperateUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperateUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateUser, other.operateUser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTask_args(");
      boolean first = true;

      sb.append("taskTo:");
      if (this.taskTo == null) {
        sb.append("null");
      } else {
        sb.append(this.taskTo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operateUser:");
      sb.append(this.operateUser);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (taskTo != null) {
        taskTo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTask_argsStandardSchemeFactory implements SchemeFactory {
      public addTask_argsStandardScheme getScheme() {
        return new addTask_argsStandardScheme();
      }
    }

    private static class addTask_argsStandardScheme extends StandardScheme<addTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_TO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.taskTo = new com.sogou.bizwork.task.api.task.to.TaskTo();
                struct.taskTo.read(iprot);
                struct.setTaskToIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPERATE_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.operateUser = iprot.readI64();
                struct.setOperateUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskTo != null) {
          oprot.writeFieldBegin(TASK_TO_FIELD_DESC);
          struct.taskTo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OPERATE_USER_FIELD_DESC);
        oprot.writeI64(struct.operateUser);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTask_argsTupleSchemeFactory implements SchemeFactory {
      public addTask_argsTupleScheme getScheme() {
        return new addTask_argsTupleScheme();
      }
    }

    private static class addTask_argsTupleScheme extends TupleScheme<addTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskTo()) {
          optionals.set(0);
        }
        if (struct.isSetOperateUser()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTaskTo()) {
          struct.taskTo.write(oprot);
        }
        if (struct.isSetOperateUser()) {
          oprot.writeI64(struct.operateUser);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.taskTo = new com.sogou.bizwork.task.api.task.to.TaskTo();
          struct.taskTo.read(iprot);
          struct.setTaskToIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operateUser = iprot.readI64();
          struct.setOperateUserIsSet(true);
        }
      }
    }

  }

  public static class addTask_result implements org.apache.thrift.TBase<addTask_result, addTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<addTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTask_resultTupleSchemeFactory());
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult success; // required
    public com.sogou.bizwork.task.api.common.exception.ApiTException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sogou.bizwork.task.api.task.result.TaskResult.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTask_result.class, metaDataMap);
    }

    public addTask_result() {
    }

    public addTask_result(
      com.sogou.bizwork.task.api.task.result.TaskResult success,
      com.sogou.bizwork.task.api.common.exception.ApiTException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTask_result(addTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.sogou.bizwork.task.api.task.result.TaskResult(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException(other.ex);
      }
    }

    public addTask_result deepCopy() {
      return new addTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult getSuccess() {
      return this.success;
    }

    public addTask_result setSuccess(com.sogou.bizwork.task.api.task.result.TaskResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.sogou.bizwork.task.api.common.exception.ApiTException getEx() {
      return this.ex;
    }

    public addTask_result setEx(com.sogou.bizwork.task.api.common.exception.ApiTException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.sogou.bizwork.task.api.task.result.TaskResult)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.sogou.bizwork.task.api.common.exception.ApiTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTask_result)
        return this.equals((addTask_result)that);
      return false;
    }

    public boolean equals(addTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTask_resultStandardSchemeFactory implements SchemeFactory {
      public addTask_resultStandardScheme getScheme() {
        return new addTask_resultStandardScheme();
      }
    }

    private static class addTask_resultStandardScheme extends StandardScheme<addTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.sogou.bizwork.task.api.task.result.TaskResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTask_resultTupleSchemeFactory implements SchemeFactory {
      public addTask_resultTupleScheme getScheme() {
        return new addTask_resultTupleScheme();
      }
    }

    private static class addTask_resultTupleScheme extends TupleScheme<addTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.sogou.bizwork.task.api.task.result.TaskResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class updateTask_args implements org.apache.thrift.TBase<updateTask_args, updateTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTask_args");

    private static final org.apache.thrift.protocol.TField TASK_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("taskTo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPERATE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("operateUser", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTask_argsTupleSchemeFactory());
    }

    public com.sogou.bizwork.task.api.task.to.TaskTo taskTo; // required
    public long operateUser; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_TO((short)1, "taskTo"),
      OPERATE_USER((short)2, "operateUser");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_TO
            return TASK_TO;
          case 2: // OPERATE_USER
            return OPERATE_USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OPERATEUSER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_TO, new org.apache.thrift.meta_data.FieldMetaData("taskTo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sogou.bizwork.task.api.task.to.TaskTo.class)));
      tmpMap.put(_Fields.OPERATE_USER, new org.apache.thrift.meta_data.FieldMetaData("operateUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTask_args.class, metaDataMap);
    }

    public updateTask_args() {
    }

    public updateTask_args(
      com.sogou.bizwork.task.api.task.to.TaskTo taskTo,
      long operateUser)
    {
      this();
      this.taskTo = taskTo;
      this.operateUser = operateUser;
      setOperateUserIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTask_args(updateTask_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTaskTo()) {
        this.taskTo = new com.sogou.bizwork.task.api.task.to.TaskTo(other.taskTo);
      }
      this.operateUser = other.operateUser;
    }

    public updateTask_args deepCopy() {
      return new updateTask_args(this);
    }

    @Override
    public void clear() {
      this.taskTo = null;
      setOperateUserIsSet(false);
      this.operateUser = 0;
    }

    public com.sogou.bizwork.task.api.task.to.TaskTo getTaskTo() {
      return this.taskTo;
    }

    public updateTask_args setTaskTo(com.sogou.bizwork.task.api.task.to.TaskTo taskTo) {
      this.taskTo = taskTo;
      return this;
    }

    public void unsetTaskTo() {
      this.taskTo = null;
    }

    /** Returns true if field taskTo is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskTo() {
      return this.taskTo != null;
    }

    public void setTaskToIsSet(boolean value) {
      if (!value) {
        this.taskTo = null;
      }
    }

    public long getOperateUser() {
      return this.operateUser;
    }

    public updateTask_args setOperateUser(long operateUser) {
      this.operateUser = operateUser;
      setOperateUserIsSet(true);
      return this;
    }

    public void unsetOperateUser() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATEUSER_ISSET_ID);
    }

    /** Returns true if field operateUser is set (has been assigned a value) and false otherwise */
    public boolean isSetOperateUser() {
      return EncodingUtils.testBit(__isset_bitfield, __OPERATEUSER_ISSET_ID);
    }

    public void setOperateUserIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATEUSER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_TO:
        if (value == null) {
          unsetTaskTo();
        } else {
          setTaskTo((com.sogou.bizwork.task.api.task.to.TaskTo)value);
        }
        break;

      case OPERATE_USER:
        if (value == null) {
          unsetOperateUser();
        } else {
          setOperateUser((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_TO:
        return getTaskTo();

      case OPERATE_USER:
        return Long.valueOf(getOperateUser());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_TO:
        return isSetTaskTo();
      case OPERATE_USER:
        return isSetOperateUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTask_args)
        return this.equals((updateTask_args)that);
      return false;
    }

    public boolean equals(updateTask_args that) {
      if (that == null)
        return false;

      boolean this_present_taskTo = true && this.isSetTaskTo();
      boolean that_present_taskTo = true && that.isSetTaskTo();
      if (this_present_taskTo || that_present_taskTo) {
        if (!(this_present_taskTo && that_present_taskTo))
          return false;
        if (!this.taskTo.equals(that.taskTo))
          return false;
      }

      boolean this_present_operateUser = true;
      boolean that_present_operateUser = true;
      if (this_present_operateUser || that_present_operateUser) {
        if (!(this_present_operateUser && that_present_operateUser))
          return false;
        if (this.operateUser != that.operateUser)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskTo()).compareTo(other.isSetTaskTo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskTo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskTo, other.taskTo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperateUser()).compareTo(other.isSetOperateUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperateUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateUser, other.operateUser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTask_args(");
      boolean first = true;

      sb.append("taskTo:");
      if (this.taskTo == null) {
        sb.append("null");
      } else {
        sb.append(this.taskTo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operateUser:");
      sb.append(this.operateUser);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (taskTo != null) {
        taskTo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTask_argsStandardSchemeFactory implements SchemeFactory {
      public updateTask_argsStandardScheme getScheme() {
        return new updateTask_argsStandardScheme();
      }
    }

    private static class updateTask_argsStandardScheme extends StandardScheme<updateTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_TO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.taskTo = new com.sogou.bizwork.task.api.task.to.TaskTo();
                struct.taskTo.read(iprot);
                struct.setTaskToIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPERATE_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.operateUser = iprot.readI64();
                struct.setOperateUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskTo != null) {
          oprot.writeFieldBegin(TASK_TO_FIELD_DESC);
          struct.taskTo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OPERATE_USER_FIELD_DESC);
        oprot.writeI64(struct.operateUser);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTask_argsTupleSchemeFactory implements SchemeFactory {
      public updateTask_argsTupleScheme getScheme() {
        return new updateTask_argsTupleScheme();
      }
    }

    private static class updateTask_argsTupleScheme extends TupleScheme<updateTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskTo()) {
          optionals.set(0);
        }
        if (struct.isSetOperateUser()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTaskTo()) {
          struct.taskTo.write(oprot);
        }
        if (struct.isSetOperateUser()) {
          oprot.writeI64(struct.operateUser);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.taskTo = new com.sogou.bizwork.task.api.task.to.TaskTo();
          struct.taskTo.read(iprot);
          struct.setTaskToIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operateUser = iprot.readI64();
          struct.setOperateUserIsSet(true);
        }
      }
    }

  }

  public static class updateTask_result implements org.apache.thrift.TBase<updateTask_result, updateTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTask_resultTupleSchemeFactory());
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult success; // required
    public com.sogou.bizwork.task.api.common.exception.ApiTException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sogou.bizwork.task.api.task.result.TaskResult.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTask_result.class, metaDataMap);
    }

    public updateTask_result() {
    }

    public updateTask_result(
      com.sogou.bizwork.task.api.task.result.TaskResult success,
      com.sogou.bizwork.task.api.common.exception.ApiTException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTask_result(updateTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.sogou.bizwork.task.api.task.result.TaskResult(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException(other.ex);
      }
    }

    public updateTask_result deepCopy() {
      return new updateTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult getSuccess() {
      return this.success;
    }

    public updateTask_result setSuccess(com.sogou.bizwork.task.api.task.result.TaskResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.sogou.bizwork.task.api.common.exception.ApiTException getEx() {
      return this.ex;
    }

    public updateTask_result setEx(com.sogou.bizwork.task.api.common.exception.ApiTException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.sogou.bizwork.task.api.task.result.TaskResult)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.sogou.bizwork.task.api.common.exception.ApiTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTask_result)
        return this.equals((updateTask_result)that);
      return false;
    }

    public boolean equals(updateTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTask_resultStandardSchemeFactory implements SchemeFactory {
      public updateTask_resultStandardScheme getScheme() {
        return new updateTask_resultStandardScheme();
      }
    }

    private static class updateTask_resultStandardScheme extends StandardScheme<updateTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.sogou.bizwork.task.api.task.result.TaskResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTask_resultTupleSchemeFactory implements SchemeFactory {
      public updateTask_resultTupleScheme getScheme() {
        return new updateTask_resultTupleScheme();
      }
    }

    private static class updateTask_resultTupleScheme extends TupleScheme<updateTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.sogou.bizwork.task.api.task.result.TaskResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class deleteTask_args implements org.apache.thrift.TBase<deleteTask_args, deleteTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTask_args");

    private static final org.apache.thrift.protocol.TField TASK_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("taskTo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPERATE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("operateUser", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTask_argsTupleSchemeFactory());
    }

    public com.sogou.bizwork.task.api.task.to.TaskTo taskTo; // required
    public long operateUser; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_TO((short)1, "taskTo"),
      OPERATE_USER((short)2, "operateUser");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_TO
            return TASK_TO;
          case 2: // OPERATE_USER
            return OPERATE_USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OPERATEUSER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_TO, new org.apache.thrift.meta_data.FieldMetaData("taskTo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sogou.bizwork.task.api.task.to.TaskTo.class)));
      tmpMap.put(_Fields.OPERATE_USER, new org.apache.thrift.meta_data.FieldMetaData("operateUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTask_args.class, metaDataMap);
    }

    public deleteTask_args() {
    }

    public deleteTask_args(
      com.sogou.bizwork.task.api.task.to.TaskTo taskTo,
      long operateUser)
    {
      this();
      this.taskTo = taskTo;
      this.operateUser = operateUser;
      setOperateUserIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTask_args(deleteTask_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTaskTo()) {
        this.taskTo = new com.sogou.bizwork.task.api.task.to.TaskTo(other.taskTo);
      }
      this.operateUser = other.operateUser;
    }

    public deleteTask_args deepCopy() {
      return new deleteTask_args(this);
    }

    @Override
    public void clear() {
      this.taskTo = null;
      setOperateUserIsSet(false);
      this.operateUser = 0;
    }

    public com.sogou.bizwork.task.api.task.to.TaskTo getTaskTo() {
      return this.taskTo;
    }

    public deleteTask_args setTaskTo(com.sogou.bizwork.task.api.task.to.TaskTo taskTo) {
      this.taskTo = taskTo;
      return this;
    }

    public void unsetTaskTo() {
      this.taskTo = null;
    }

    /** Returns true if field taskTo is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskTo() {
      return this.taskTo != null;
    }

    public void setTaskToIsSet(boolean value) {
      if (!value) {
        this.taskTo = null;
      }
    }

    public long getOperateUser() {
      return this.operateUser;
    }

    public deleteTask_args setOperateUser(long operateUser) {
      this.operateUser = operateUser;
      setOperateUserIsSet(true);
      return this;
    }

    public void unsetOperateUser() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATEUSER_ISSET_ID);
    }

    /** Returns true if field operateUser is set (has been assigned a value) and false otherwise */
    public boolean isSetOperateUser() {
      return EncodingUtils.testBit(__isset_bitfield, __OPERATEUSER_ISSET_ID);
    }

    public void setOperateUserIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATEUSER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_TO:
        if (value == null) {
          unsetTaskTo();
        } else {
          setTaskTo((com.sogou.bizwork.task.api.task.to.TaskTo)value);
        }
        break;

      case OPERATE_USER:
        if (value == null) {
          unsetOperateUser();
        } else {
          setOperateUser((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_TO:
        return getTaskTo();

      case OPERATE_USER:
        return Long.valueOf(getOperateUser());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_TO:
        return isSetTaskTo();
      case OPERATE_USER:
        return isSetOperateUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTask_args)
        return this.equals((deleteTask_args)that);
      return false;
    }

    public boolean equals(deleteTask_args that) {
      if (that == null)
        return false;

      boolean this_present_taskTo = true && this.isSetTaskTo();
      boolean that_present_taskTo = true && that.isSetTaskTo();
      if (this_present_taskTo || that_present_taskTo) {
        if (!(this_present_taskTo && that_present_taskTo))
          return false;
        if (!this.taskTo.equals(that.taskTo))
          return false;
      }

      boolean this_present_operateUser = true;
      boolean that_present_operateUser = true;
      if (this_present_operateUser || that_present_operateUser) {
        if (!(this_present_operateUser && that_present_operateUser))
          return false;
        if (this.operateUser != that.operateUser)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskTo()).compareTo(other.isSetTaskTo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskTo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskTo, other.taskTo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperateUser()).compareTo(other.isSetOperateUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperateUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateUser, other.operateUser);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTask_args(");
      boolean first = true;

      sb.append("taskTo:");
      if (this.taskTo == null) {
        sb.append("null");
      } else {
        sb.append(this.taskTo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operateUser:");
      sb.append(this.operateUser);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (taskTo != null) {
        taskTo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTask_argsStandardSchemeFactory implements SchemeFactory {
      public deleteTask_argsStandardScheme getScheme() {
        return new deleteTask_argsStandardScheme();
      }
    }

    private static class deleteTask_argsStandardScheme extends StandardScheme<deleteTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_TO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.taskTo = new com.sogou.bizwork.task.api.task.to.TaskTo();
                struct.taskTo.read(iprot);
                struct.setTaskToIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPERATE_USER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.operateUser = iprot.readI64();
                struct.setOperateUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskTo != null) {
          oprot.writeFieldBegin(TASK_TO_FIELD_DESC);
          struct.taskTo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OPERATE_USER_FIELD_DESC);
        oprot.writeI64(struct.operateUser);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTask_argsTupleSchemeFactory implements SchemeFactory {
      public deleteTask_argsTupleScheme getScheme() {
        return new deleteTask_argsTupleScheme();
      }
    }

    private static class deleteTask_argsTupleScheme extends TupleScheme<deleteTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskTo()) {
          optionals.set(0);
        }
        if (struct.isSetOperateUser()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTaskTo()) {
          struct.taskTo.write(oprot);
        }
        if (struct.isSetOperateUser()) {
          oprot.writeI64(struct.operateUser);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.taskTo = new com.sogou.bizwork.task.api.task.to.TaskTo();
          struct.taskTo.read(iprot);
          struct.setTaskToIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operateUser = iprot.readI64();
          struct.setOperateUserIsSet(true);
        }
      }
    }

  }

  public static class deleteTask_result implements org.apache.thrift.TBase<deleteTask_result, deleteTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTask_resultTupleSchemeFactory());
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult success; // required
    public com.sogou.bizwork.task.api.common.exception.ApiTException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sogou.bizwork.task.api.task.result.TaskResult.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTask_result.class, metaDataMap);
    }

    public deleteTask_result() {
    }

    public deleteTask_result(
      com.sogou.bizwork.task.api.task.result.TaskResult success,
      com.sogou.bizwork.task.api.common.exception.ApiTException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTask_result(deleteTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.sogou.bizwork.task.api.task.result.TaskResult(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException(other.ex);
      }
    }

    public deleteTask_result deepCopy() {
      return new deleteTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public com.sogou.bizwork.task.api.task.result.TaskResult getSuccess() {
      return this.success;
    }

    public deleteTask_result setSuccess(com.sogou.bizwork.task.api.task.result.TaskResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.sogou.bizwork.task.api.common.exception.ApiTException getEx() {
      return this.ex;
    }

    public deleteTask_result setEx(com.sogou.bizwork.task.api.common.exception.ApiTException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.sogou.bizwork.task.api.task.result.TaskResult)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((com.sogou.bizwork.task.api.common.exception.ApiTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTask_result)
        return this.equals((deleteTask_result)that);
      return false;
    }

    public boolean equals(deleteTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTask_resultStandardSchemeFactory implements SchemeFactory {
      public deleteTask_resultStandardScheme getScheme() {
        return new deleteTask_resultStandardScheme();
      }
    }

    private static class deleteTask_resultStandardScheme extends StandardScheme<deleteTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.sogou.bizwork.task.api.task.result.TaskResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTask_resultTupleSchemeFactory implements SchemeFactory {
      public deleteTask_resultTupleScheme getScheme() {
        return new deleteTask_resultTupleScheme();
      }
    }

    private static class deleteTask_resultTupleScheme extends TupleScheme<deleteTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.sogou.bizwork.task.api.task.result.TaskResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new com.sogou.bizwork.task.api.common.exception.ApiTException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
